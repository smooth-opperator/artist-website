{"version":3,"sources":["generated/graphql.tsx","styles.ts","components/GallerySection/index.tsx","components/LoadingSpinner/index.tsx","components/Exhibition/index.tsx","components/Sidebar/index.tsx","components/ExhibitionList/styles.ts","components/ExhibitionList/index.tsx","components/Installation/index.tsx","components/InstallationsList/index.tsx","components/Video/index.tsx","components/VideoList/index.tsx","components/InfoList/styles.ts","components/InfoList/index.tsx","components/Sidebar/styles.ts","App.tsx","index.tsx"],"names":["AssetOrderByInput","DocumentFileTypes","ExhibitionOrderByInput","ExhibitionType","ImageFit","InfoOrderByInput","InstallationOrderByInput","Locale","SocialOrderByInput","Stage","SystemDateTimeFieldVariation","UserKind","UserOrderByInput","VideoOrderByInput","_FilterKind","_MutationInputFieldKind","_MutationKind","_OrderDirection","_RelationInputCardinality","_RelationInputKind","_RelationKind","_SystemDateTimeFieldVariation","defaultOptions","ExhibitionsDocument","gql","ExhibitionListDocument","InfoListDocument","InstallationsDocument","InstallationsListDocument","SidebarDocument","VideosDocument","VideoListDocument","MainContainer","styled","div","SectionContainer","SectionTitle","SectionItem","SectionItemTitle","SectionItemSubtitle","GalleryItem","ImageCredit","sharedGalleryContainerStyles","GalleryImageContainer","GalleryVideoContainer","ListItemButton","isActive","Section","id","title","caption","images","aboutImage","videoUrl","credit","useState","videoWidth","setVideoWidth","videoHeight","setVideoHeight","videoRef","useRef","aspectRatio","useEffect","setVideoDimensions","videoElem","document","getElementById","current","clientWidth","window","addEventListener","removeEventListener","map","url","src","alt","width","height","frameBorder","allowFullScreen","LoadingSpinner","color","loading","speedMultiplier","css","size","dayjs","extend","advancedFormat","SectionEnum","Exhibition","baseOptions","options","Apollo","useExhibitionsQuery","variables","data","error","exhibition","startDate","endDate","galleryName","location","about","photographerCredit","GallerySection","undefined","format","React","memo","SectionContainerStyled","ExhibitionList","useExhibitionListQuery","exhibitions","Installation","useInstallationsQuery","installation","materials","year","InstallationsList","useInstallationsListQuery","installations","Video","useVideosQuery","video","VideoList","useVideoListQuery","videos","SectionItemStyled","InfoItem","InfoList","useInfoListQuery","infos","cv","news","imprint","parse","html","MobileHeader","sharedIconButtonStyles","MobileDrawerOpen","button","MobileDrawerClose","StickyContainer","isExpanded","FixedSidebar","Title","Subtitle","ListItem","Sidebar","useSidebarQuery","activeSection","setActiveSection","activeItem","setActiveItem","drawerExpanded","setDrawerExpanded","sectionRef","gallerySectionHash","Exhibitions","Installations","Videos","handleScroll","useMemo","debounce","scrollPosition","scrollY","itemId","findElem","group","find","item","elem","getDimensions","offsetBottom","offsetTop","isActiveItem","selectedExhibition","selectedInstallation","selectedVideo","selectedInfo","Info","offsetHeight","scrollTo","elementId","sectionElem","top","left","behavior","selectSection","sectionId","Fragment","onClick","Object","keys","section","toLowerCase","split","App","client","ApolloClient","uri","process","cache","InMemoryCache","ReactDOM","render","ApolloProvider"],"mappings":"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","file":"static/js/main.4b51cd02.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar. */\n  Date: any;\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar. */\n  DateTime: any;\n  Hex: any;\n  /** Raw JSON value */\n  Json: any;\n  /** The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1. */\n  Long: any;\n  RGBAHue: any;\n  RGBATransparency: any;\n  /** Slate-compatible RichText AST */\n  RichTextAST: any;\n};\n\nexport type Aggregate = {\n  __typename?: 'Aggregate';\n  count: Scalars['Int'];\n};\n\n/** Asset system model */\nexport type Asset = Node & {\n  __typename?: 'Asset';\n  aboutExhibition: Array<Exhibition>;\n  /** The time the document was created */\n  createdAt: Scalars['DateTime'];\n  /** User that created this document */\n  createdBy?: Maybe<User>;\n  cvInfo: Array<Info>;\n  /** Get the document in other stages */\n  documentInStages: Array<Asset>;\n  /** The file name */\n  fileName: Scalars['String'];\n  /** The file handle */\n  handle: Scalars['String'];\n  /** The height of the file */\n  height?: Maybe<Scalars['Float']>;\n  /** List of Asset versions */\n  history: Array<Version>;\n  iconSocial: Array<Social>;\n  /** The unique identifier */\n  id: Scalars['ID'];\n  imagesExhibition: Array<Exhibition>;\n  imagesInstallation: Array<Installation>;\n  /** System Locale field */\n  locale: Locale;\n  /** Get the other localizations for this document */\n  localizations: Array<Asset>;\n  /** The mime type of the file */\n  mimeType?: Maybe<Scalars['String']>;\n  /** The time the document was published. Null on documents in draft stage. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** User that last published this document */\n  publishedBy?: Maybe<User>;\n  /** The file size */\n  size?: Maybe<Scalars['Float']>;\n  /** System stage field */\n  stage: Stage;\n  /** The time the document was updated */\n  updatedAt: Scalars['DateTime'];\n  /** User that last updated this document */\n  updatedBy?: Maybe<User>;\n  /** Get the url for the asset with provided transformations applied. */\n  url: Scalars['String'];\n  /** The file width */\n  width?: Maybe<Scalars['Float']>;\n};\n\n\n/** Asset system model */\nexport type AssetAboutExhibitionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  orderBy?: Maybe<ExhibitionOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<ExhibitionWhereInput>;\n};\n\n\n/** Asset system model */\nexport type AssetCreatedAtArgs = {\n  variation?: SystemDateTimeFieldVariation;\n};\n\n\n/** Asset system model */\nexport type AssetCreatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\n/** Asset system model */\nexport type AssetCvInfoArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  orderBy?: Maybe<InfoOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<InfoWhereInput>;\n};\n\n\n/** Asset system model */\nexport type AssetDocumentInStagesArgs = {\n  includeCurrent?: Scalars['Boolean'];\n  inheritLocale?: Scalars['Boolean'];\n  stages?: Array<Stage>;\n};\n\n\n/** Asset system model */\nexport type AssetHistoryArgs = {\n  limit?: Scalars['Int'];\n  skip?: Scalars['Int'];\n  stageOverride?: Maybe<Stage>;\n};\n\n\n/** Asset system model */\nexport type AssetIconSocialArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  orderBy?: Maybe<SocialOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<SocialWhereInput>;\n};\n\n\n/** Asset system model */\nexport type AssetImagesExhibitionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  orderBy?: Maybe<ExhibitionOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<ExhibitionWhereInput>;\n};\n\n\n/** Asset system model */\nexport type AssetImagesInstallationArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  orderBy?: Maybe<InstallationOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<InstallationWhereInput>;\n};\n\n\n/** Asset system model */\nexport type AssetLocalizationsArgs = {\n  includeCurrent?: Scalars['Boolean'];\n  locales?: Array<Locale>;\n};\n\n\n/** Asset system model */\nexport type AssetPublishedAtArgs = {\n  variation?: SystemDateTimeFieldVariation;\n};\n\n\n/** Asset system model */\nexport type AssetPublishedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\n/** Asset system model */\nexport type AssetUpdatedAtArgs = {\n  variation?: SystemDateTimeFieldVariation;\n};\n\n\n/** Asset system model */\nexport type AssetUpdatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\n/** Asset system model */\nexport type AssetUrlArgs = {\n  transformation?: Maybe<AssetTransformationInput>;\n};\n\nexport type AssetConnectInput = {\n  /** Allow to specify document position in list of connected documents, will default to appending at end of list */\n  position?: Maybe<ConnectPositionInput>;\n  /** Document to connect */\n  where: AssetWhereUniqueInput;\n};\n\n/** A connection to a list of items. */\nexport type AssetConnection = {\n  __typename?: 'AssetConnection';\n  aggregate: Aggregate;\n  /** A list of edges. */\n  edges: Array<AssetEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\nexport type AssetCreateInput = {\n  aboutExhibition?: Maybe<ExhibitionCreateManyInlineInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  cvInfo?: Maybe<InfoCreateManyInlineInput>;\n  fileName: Scalars['String'];\n  handle: Scalars['String'];\n  height?: Maybe<Scalars['Float']>;\n  iconSocial?: Maybe<SocialCreateManyInlineInput>;\n  imagesExhibition?: Maybe<ExhibitionCreateManyInlineInput>;\n  imagesInstallation?: Maybe<InstallationCreateManyInlineInput>;\n  /** Inline mutations for managing document localizations excluding the default locale */\n  localizations?: Maybe<AssetCreateLocalizationsInput>;\n  mimeType?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport type AssetCreateLocalizationDataInput = {\n  createdAt?: Maybe<Scalars['DateTime']>;\n  fileName: Scalars['String'];\n  handle: Scalars['String'];\n  height?: Maybe<Scalars['Float']>;\n  mimeType?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport type AssetCreateLocalizationInput = {\n  /** Localization input */\n  data: AssetCreateLocalizationDataInput;\n  locale: Locale;\n};\n\nexport type AssetCreateLocalizationsInput = {\n  /** Create localizations for the newly-created document */\n  create?: Maybe<Array<AssetCreateLocalizationInput>>;\n};\n\nexport type AssetCreateManyInlineInput = {\n  /** Connect multiple existing Asset documents */\n  connect?: Maybe<Array<AssetWhereUniqueInput>>;\n  /** Create and connect multiple existing Asset documents */\n  create?: Maybe<Array<AssetCreateInput>>;\n};\n\nexport type AssetCreateOneInlineInput = {\n  /** Connect one existing Asset document */\n  connect?: Maybe<AssetWhereUniqueInput>;\n  /** Create and connect one Asset document */\n  create?: Maybe<AssetCreateInput>;\n};\n\n/** An edge in a connection. */\nexport type AssetEdge = {\n  __typename?: 'AssetEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Asset;\n};\n\n/** Identifies documents */\nexport type AssetManyWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<AssetWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<AssetWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<AssetWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  aboutExhibition_every?: Maybe<ExhibitionWhereInput>;\n  aboutExhibition_none?: Maybe<ExhibitionWhereInput>;\n  aboutExhibition_some?: Maybe<ExhibitionWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  cvInfo_every?: Maybe<InfoWhereInput>;\n  cvInfo_none?: Maybe<InfoWhereInput>;\n  cvInfo_some?: Maybe<InfoWhereInput>;\n  iconSocial_every?: Maybe<SocialWhereInput>;\n  iconSocial_none?: Maybe<SocialWhereInput>;\n  iconSocial_some?: Maybe<SocialWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  imagesExhibition_every?: Maybe<ExhibitionWhereInput>;\n  imagesExhibition_none?: Maybe<ExhibitionWhereInput>;\n  imagesExhibition_some?: Maybe<ExhibitionWhereInput>;\n  imagesInstallation_every?: Maybe<InstallationWhereInput>;\n  imagesInstallation_none?: Maybe<InstallationWhereInput>;\n  imagesInstallation_some?: Maybe<InstallationWhereInput>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n};\n\nexport enum AssetOrderByInput {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  FileNameAsc = 'fileName_ASC',\n  FileNameDesc = 'fileName_DESC',\n  HandleAsc = 'handle_ASC',\n  HandleDesc = 'handle_DESC',\n  HeightAsc = 'height_ASC',\n  HeightDesc = 'height_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  MimeTypeAsc = 'mimeType_ASC',\n  MimeTypeDesc = 'mimeType_DESC',\n  PublishedAtAsc = 'publishedAt_ASC',\n  PublishedAtDesc = 'publishedAt_DESC',\n  SizeAsc = 'size_ASC',\n  SizeDesc = 'size_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC',\n  WidthAsc = 'width_ASC',\n  WidthDesc = 'width_DESC'\n}\n\n/** Transformations for Assets */\nexport type AssetTransformationInput = {\n  document?: Maybe<DocumentTransformationInput>;\n  image?: Maybe<ImageTransformationInput>;\n  /** Pass true if you want to validate the passed transformation parameters */\n  validateOptions?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AssetUpdateInput = {\n  aboutExhibition?: Maybe<ExhibitionUpdateManyInlineInput>;\n  cvInfo?: Maybe<InfoUpdateManyInlineInput>;\n  fileName?: Maybe<Scalars['String']>;\n  handle?: Maybe<Scalars['String']>;\n  height?: Maybe<Scalars['Float']>;\n  iconSocial?: Maybe<SocialUpdateManyInlineInput>;\n  imagesExhibition?: Maybe<ExhibitionUpdateManyInlineInput>;\n  imagesInstallation?: Maybe<InstallationUpdateManyInlineInput>;\n  /** Manage document localizations */\n  localizations?: Maybe<AssetUpdateLocalizationsInput>;\n  mimeType?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport type AssetUpdateLocalizationDataInput = {\n  fileName?: Maybe<Scalars['String']>;\n  handle?: Maybe<Scalars['String']>;\n  height?: Maybe<Scalars['Float']>;\n  mimeType?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport type AssetUpdateLocalizationInput = {\n  data: AssetUpdateLocalizationDataInput;\n  locale: Locale;\n};\n\nexport type AssetUpdateLocalizationsInput = {\n  /** Localizations to create */\n  create?: Maybe<Array<AssetCreateLocalizationInput>>;\n  /** Localizations to delete */\n  delete?: Maybe<Array<Locale>>;\n  /** Localizations to update */\n  update?: Maybe<Array<AssetUpdateLocalizationInput>>;\n  upsert?: Maybe<Array<AssetUpsertLocalizationInput>>;\n};\n\nexport type AssetUpdateManyInlineInput = {\n  /** Connect multiple existing Asset documents */\n  connect?: Maybe<Array<AssetConnectInput>>;\n  /** Create and connect multiple Asset documents */\n  create?: Maybe<Array<AssetCreateInput>>;\n  /** Delete multiple Asset documents */\n  delete?: Maybe<Array<AssetWhereUniqueInput>>;\n  /** Disconnect multiple Asset documents */\n  disconnect?: Maybe<Array<AssetWhereUniqueInput>>;\n  /** Override currently-connected documents with multiple existing Asset documents */\n  set?: Maybe<Array<AssetWhereUniqueInput>>;\n  /** Update multiple Asset documents */\n  update?: Maybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;\n  /** Upsert multiple Asset documents */\n  upsert?: Maybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;\n};\n\nexport type AssetUpdateManyInput = {\n  fileName?: Maybe<Scalars['String']>;\n  height?: Maybe<Scalars['Float']>;\n  /** Optional updates to localizations */\n  localizations?: Maybe<AssetUpdateManyLocalizationsInput>;\n  mimeType?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport type AssetUpdateManyLocalizationDataInput = {\n  fileName?: Maybe<Scalars['String']>;\n  height?: Maybe<Scalars['Float']>;\n  mimeType?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport type AssetUpdateManyLocalizationInput = {\n  data: AssetUpdateManyLocalizationDataInput;\n  locale: Locale;\n};\n\nexport type AssetUpdateManyLocalizationsInput = {\n  /** Localizations to update */\n  update?: Maybe<Array<AssetUpdateManyLocalizationInput>>;\n};\n\nexport type AssetUpdateManyWithNestedWhereInput = {\n  /** Update many input */\n  data: AssetUpdateManyInput;\n  /** Document search */\n  where: AssetWhereInput;\n};\n\nexport type AssetUpdateOneInlineInput = {\n  /** Connect existing Asset document */\n  connect?: Maybe<AssetWhereUniqueInput>;\n  /** Create and connect one Asset document */\n  create?: Maybe<AssetCreateInput>;\n  /** Delete currently connected Asset document */\n  delete?: Maybe<Scalars['Boolean']>;\n  /** Disconnect currently connected Asset document */\n  disconnect?: Maybe<Scalars['Boolean']>;\n  /** Update single Asset document */\n  update?: Maybe<AssetUpdateWithNestedWhereUniqueInput>;\n  /** Upsert single Asset document */\n  upsert?: Maybe<AssetUpsertWithNestedWhereUniqueInput>;\n};\n\nexport type AssetUpdateWithNestedWhereUniqueInput = {\n  /** Document to update */\n  data: AssetUpdateInput;\n  /** Unique document search */\n  where: AssetWhereUniqueInput;\n};\n\nexport type AssetUpsertInput = {\n  /** Create document if it didn't exist */\n  create: AssetCreateInput;\n  /** Update document if it exists */\n  update: AssetUpdateInput;\n};\n\nexport type AssetUpsertLocalizationInput = {\n  create: AssetCreateLocalizationDataInput;\n  locale: Locale;\n  update: AssetUpdateLocalizationDataInput;\n};\n\nexport type AssetUpsertWithNestedWhereUniqueInput = {\n  /** Upsert data */\n  data: AssetUpsertInput;\n  /** Unique document search */\n  where: AssetWhereUniqueInput;\n};\n\n/** Identifies documents */\nexport type AssetWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<AssetWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<AssetWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<AssetWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  aboutExhibition_every?: Maybe<ExhibitionWhereInput>;\n  aboutExhibition_none?: Maybe<ExhibitionWhereInput>;\n  aboutExhibition_some?: Maybe<ExhibitionWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  cvInfo_every?: Maybe<InfoWhereInput>;\n  cvInfo_none?: Maybe<InfoWhereInput>;\n  cvInfo_some?: Maybe<InfoWhereInput>;\n  fileName?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  fileName_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  fileName_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  fileName_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  fileName_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  fileName_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  fileName_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  fileName_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  fileName_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  fileName_starts_with?: Maybe<Scalars['String']>;\n  handle?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  handle_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  handle_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  handle_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  handle_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  handle_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  handle_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  handle_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  handle_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  handle_starts_with?: Maybe<Scalars['String']>;\n  height?: Maybe<Scalars['Float']>;\n  /** All values greater than the given value. */\n  height_gt?: Maybe<Scalars['Float']>;\n  /** All values greater than or equal the given value. */\n  height_gte?: Maybe<Scalars['Float']>;\n  /** All values that are contained in given list. */\n  height_in?: Maybe<Array<Scalars['Float']>>;\n  /** All values less than the given value. */\n  height_lt?: Maybe<Scalars['Float']>;\n  /** All values less than or equal the given value. */\n  height_lte?: Maybe<Scalars['Float']>;\n  /** All values that are not equal to given value. */\n  height_not?: Maybe<Scalars['Float']>;\n  /** All values that are not contained in given list. */\n  height_not_in?: Maybe<Array<Scalars['Float']>>;\n  iconSocial_every?: Maybe<SocialWhereInput>;\n  iconSocial_none?: Maybe<SocialWhereInput>;\n  iconSocial_some?: Maybe<SocialWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  imagesExhibition_every?: Maybe<ExhibitionWhereInput>;\n  imagesExhibition_none?: Maybe<ExhibitionWhereInput>;\n  imagesExhibition_some?: Maybe<ExhibitionWhereInput>;\n  imagesInstallation_every?: Maybe<InstallationWhereInput>;\n  imagesInstallation_none?: Maybe<InstallationWhereInput>;\n  imagesInstallation_some?: Maybe<InstallationWhereInput>;\n  mimeType?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  mimeType_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  mimeType_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  mimeType_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  mimeType_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  mimeType_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  mimeType_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  mimeType_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  mimeType_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  mimeType_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  size?: Maybe<Scalars['Float']>;\n  /** All values greater than the given value. */\n  size_gt?: Maybe<Scalars['Float']>;\n  /** All values greater than or equal the given value. */\n  size_gte?: Maybe<Scalars['Float']>;\n  /** All values that are contained in given list. */\n  size_in?: Maybe<Array<Scalars['Float']>>;\n  /** All values less than the given value. */\n  size_lt?: Maybe<Scalars['Float']>;\n  /** All values less than or equal the given value. */\n  size_lte?: Maybe<Scalars['Float']>;\n  /** All values that are not equal to given value. */\n  size_not?: Maybe<Scalars['Float']>;\n  /** All values that are not contained in given list. */\n  size_not_in?: Maybe<Array<Scalars['Float']>>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n  width?: Maybe<Scalars['Float']>;\n  /** All values greater than the given value. */\n  width_gt?: Maybe<Scalars['Float']>;\n  /** All values greater than or equal the given value. */\n  width_gte?: Maybe<Scalars['Float']>;\n  /** All values that are contained in given list. */\n  width_in?: Maybe<Array<Scalars['Float']>>;\n  /** All values less than the given value. */\n  width_lt?: Maybe<Scalars['Float']>;\n  /** All values less than or equal the given value. */\n  width_lte?: Maybe<Scalars['Float']>;\n  /** All values that are not equal to given value. */\n  width_not?: Maybe<Scalars['Float']>;\n  /** All values that are not contained in given list. */\n  width_not_in?: Maybe<Array<Scalars['Float']>>;\n};\n\n/** References Asset record uniquely */\nexport type AssetWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type BatchPayload = {\n  __typename?: 'BatchPayload';\n  /** The number of nodes that have been affected by the Batch operation. */\n  count: Scalars['Long'];\n};\n\n/** Representing a color value comprising of HEX, RGBA and css color values */\nexport type Color = {\n  __typename?: 'Color';\n  css: Scalars['String'];\n  hex: Scalars['Hex'];\n  rgba: Rgba;\n};\n\n/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */\nexport type ColorInput = {\n  hex?: Maybe<Scalars['Hex']>;\n  rgba?: Maybe<RgbaInput>;\n};\n\nexport type ConnectPositionInput = {\n  /** Connect document after specified document */\n  after?: Maybe<Scalars['ID']>;\n  /** Connect document before specified document */\n  before?: Maybe<Scalars['ID']>;\n  /** Connect document at last position */\n  end?: Maybe<Scalars['Boolean']>;\n  /** Connect document at first position */\n  start?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum DocumentFileTypes {\n  Doc = 'doc',\n  Docx = 'docx',\n  Html = 'html',\n  Jpg = 'jpg',\n  Odp = 'odp',\n  Ods = 'ods',\n  Odt = 'odt',\n  Pdf = 'pdf',\n  Png = 'png',\n  Ppt = 'ppt',\n  Pptx = 'pptx',\n  Svg = 'svg',\n  Txt = 'txt',\n  Webp = 'webp',\n  Xls = 'xls',\n  Xlsx = 'xlsx'\n}\n\nexport type DocumentOutputInput = {\n  /**\n   * Transforms a document into a desired file type.\n   * See this matrix for format support:\n   *\n   * PDF:\tjpg, odp, ods, odt, png, svg, txt, and webp\n   * DOC:\tdocx, html, jpg, odt, pdf, png, svg, txt, and webp\n   * DOCX:\tdoc, html, jpg, odt, pdf, png, svg, txt, and webp\n   * ODT:\tdoc, docx, html, jpg, pdf, png, svg, txt, and webp\n   * XLS:\tjpg, pdf, ods, png, svg, xlsx, and webp\n   * XLSX:\tjpg, pdf, ods, png, svg, xls, and webp\n   * ODS:\tjpg, pdf, png, xls, svg, xlsx, and webp\n   * PPT:\tjpg, odp, pdf, png, svg, pptx, and webp\n   * PPTX:\tjpg, odp, pdf, png, svg, ppt, and webp\n   * ODP:\tjpg, pdf, png, ppt, svg, pptx, and webp\n   * BMP:\tjpg, odp, ods, odt, pdf, png, svg, and webp\n   * GIF:\tjpg, odp, ods, odt, pdf, png, svg, and webp\n   * JPG:\tjpg, odp, ods, odt, pdf, png, svg, and webp\n   * PNG:\tjpg, odp, ods, odt, pdf, png, svg, and webp\n   * WEBP:\tjpg, odp, ods, odt, pdf, png, svg, and webp\n   * TIFF:\tjpg, odp, ods, odt, pdf, png, svg, and webp\n   * AI:\t    jpg, odp, ods, odt, pdf, png, svg, and webp\n   * PSD:\tjpg, odp, ods, odt, pdf, png, svg, and webp\n   * SVG:\tjpg, odp, ods, odt, pdf, png, and webp\n   * HTML:\tjpg, odt, pdf, svg, txt, and webp\n   * TXT:\tjpg, html, odt, pdf, svg, and webp\n   */\n  format?: Maybe<DocumentFileTypes>;\n};\n\n/** Transformations for Documents */\nexport type DocumentTransformationInput = {\n  /** Changes the output for the file. */\n  output?: Maybe<DocumentOutputInput>;\n};\n\nexport type DocumentVersion = {\n  __typename?: 'DocumentVersion';\n  createdAt: Scalars['DateTime'];\n  data?: Maybe<Scalars['Json']>;\n  id: Scalars['ID'];\n  revision: Scalars['Int'];\n  stage: Stage;\n};\n\nexport type Exhibition = Node & {\n  __typename?: 'Exhibition';\n  about?: Maybe<Asset>;\n  /** The time the document was created */\n  createdAt: Scalars['DateTime'];\n  /** User that created this document */\n  createdBy?: Maybe<User>;\n  /** Get the document in other stages */\n  documentInStages: Array<Exhibition>;\n  endDate?: Maybe<Scalars['Date']>;\n  galleryName?: Maybe<Scalars['String']>;\n  /** List of Exhibition versions */\n  history: Array<Version>;\n  /** The unique identifier */\n  id: Scalars['ID'];\n  images: Array<Asset>;\n  /** (city, state or country) */\n  location?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  /** The time the document was published. Null on documents in draft stage. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** User that last published this document */\n  publishedBy?: Maybe<User>;\n  /** System stage field */\n  stage: Stage;\n  startDate?: Maybe<Scalars['Date']>;\n  title?: Maybe<Scalars['String']>;\n  type?: Maybe<ExhibitionType>;\n  /** The time the document was updated */\n  updatedAt: Scalars['DateTime'];\n  /** User that last updated this document */\n  updatedBy?: Maybe<User>;\n};\n\n\nexport type ExhibitionAboutArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type ExhibitionCreatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type ExhibitionDocumentInStagesArgs = {\n  includeCurrent?: Scalars['Boolean'];\n  inheritLocale?: Scalars['Boolean'];\n  stages?: Array<Stage>;\n};\n\n\nexport type ExhibitionHistoryArgs = {\n  limit?: Scalars['Int'];\n  skip?: Scalars['Int'];\n  stageOverride?: Maybe<Stage>;\n};\n\n\nexport type ExhibitionImagesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  orderBy?: Maybe<AssetOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<AssetWhereInput>;\n};\n\n\nexport type ExhibitionPublishedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type ExhibitionUpdatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\nexport type ExhibitionConnectInput = {\n  /** Allow to specify document position in list of connected documents, will default to appending at end of list */\n  position?: Maybe<ConnectPositionInput>;\n  /** Document to connect */\n  where: ExhibitionWhereUniqueInput;\n};\n\n/** A connection to a list of items. */\nexport type ExhibitionConnection = {\n  __typename?: 'ExhibitionConnection';\n  aggregate: Aggregate;\n  /** A list of edges. */\n  edges: Array<ExhibitionEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\nexport type ExhibitionCreateInput = {\n  about?: Maybe<AssetCreateOneInlineInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  endDate?: Maybe<Scalars['Date']>;\n  galleryName?: Maybe<Scalars['String']>;\n  images?: Maybe<AssetCreateManyInlineInput>;\n  location?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  startDate?: Maybe<Scalars['Date']>;\n  title?: Maybe<Scalars['String']>;\n  type?: Maybe<ExhibitionType>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type ExhibitionCreateManyInlineInput = {\n  /** Connect multiple existing Exhibition documents */\n  connect?: Maybe<Array<ExhibitionWhereUniqueInput>>;\n  /** Create and connect multiple existing Exhibition documents */\n  create?: Maybe<Array<ExhibitionCreateInput>>;\n};\n\nexport type ExhibitionCreateOneInlineInput = {\n  /** Connect one existing Exhibition document */\n  connect?: Maybe<ExhibitionWhereUniqueInput>;\n  /** Create and connect one Exhibition document */\n  create?: Maybe<ExhibitionCreateInput>;\n};\n\n/** An edge in a connection. */\nexport type ExhibitionEdge = {\n  __typename?: 'ExhibitionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Exhibition;\n};\n\n/** Identifies documents */\nexport type ExhibitionManyWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<ExhibitionWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<ExhibitionWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<ExhibitionWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  about?: Maybe<AssetWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  endDate?: Maybe<Scalars['Date']>;\n  /** All values greater than the given value. */\n  endDate_gt?: Maybe<Scalars['Date']>;\n  /** All values greater than or equal the given value. */\n  endDate_gte?: Maybe<Scalars['Date']>;\n  /** All values that are contained in given list. */\n  endDate_in?: Maybe<Array<Scalars['Date']>>;\n  /** All values less than the given value. */\n  endDate_lt?: Maybe<Scalars['Date']>;\n  /** All values less than or equal the given value. */\n  endDate_lte?: Maybe<Scalars['Date']>;\n  /** All values that are not equal to given value. */\n  endDate_not?: Maybe<Scalars['Date']>;\n  /** All values that are not contained in given list. */\n  endDate_not_in?: Maybe<Array<Scalars['Date']>>;\n  galleryName?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  galleryName_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  galleryName_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  galleryName_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  galleryName_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  galleryName_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  galleryName_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  galleryName_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  galleryName_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  galleryName_starts_with?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  images_every?: Maybe<AssetWhereInput>;\n  images_none?: Maybe<AssetWhereInput>;\n  images_some?: Maybe<AssetWhereInput>;\n  location?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  location_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  location_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  location_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  location_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  location_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  location_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  location_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  location_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  location_starts_with?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  photographerCredit_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  photographerCredit_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  photographerCredit_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  photographerCredit_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  photographerCredit_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  photographerCredit_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  photographerCredit_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  photographerCredit_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  photographerCredit_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  startDate?: Maybe<Scalars['Date']>;\n  /** All values greater than the given value. */\n  startDate_gt?: Maybe<Scalars['Date']>;\n  /** All values greater than or equal the given value. */\n  startDate_gte?: Maybe<Scalars['Date']>;\n  /** All values that are contained in given list. */\n  startDate_in?: Maybe<Array<Scalars['Date']>>;\n  /** All values less than the given value. */\n  startDate_lt?: Maybe<Scalars['Date']>;\n  /** All values less than or equal the given value. */\n  startDate_lte?: Maybe<Scalars['Date']>;\n  /** All values that are not equal to given value. */\n  startDate_not?: Maybe<Scalars['Date']>;\n  /** All values that are not contained in given list. */\n  startDate_not_in?: Maybe<Array<Scalars['Date']>>;\n  title?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  title_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  title_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  title_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  title_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  title_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  title_starts_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ExhibitionType>;\n  /** All values that are contained in given list. */\n  type_in?: Maybe<Array<ExhibitionType>>;\n  /** All values that are not equal to given value. */\n  type_not?: Maybe<ExhibitionType>;\n  /** All values that are not contained in given list. */\n  type_not_in?: Maybe<Array<ExhibitionType>>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n};\n\nexport enum ExhibitionOrderByInput {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  EndDateAsc = 'endDate_ASC',\n  EndDateDesc = 'endDate_DESC',\n  GalleryNameAsc = 'galleryName_ASC',\n  GalleryNameDesc = 'galleryName_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  LocationAsc = 'location_ASC',\n  LocationDesc = 'location_DESC',\n  PhotographerCreditAsc = 'photographerCredit_ASC',\n  PhotographerCreditDesc = 'photographerCredit_DESC',\n  PublishedAtAsc = 'publishedAt_ASC',\n  PublishedAtDesc = 'publishedAt_DESC',\n  StartDateAsc = 'startDate_ASC',\n  StartDateDesc = 'startDate_DESC',\n  TitleAsc = 'title_ASC',\n  TitleDesc = 'title_DESC',\n  TypeAsc = 'type_ASC',\n  TypeDesc = 'type_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport enum ExhibitionType {\n  Group = 'group',\n  Solo = 'solo'\n}\n\nexport type ExhibitionUpdateInput = {\n  about?: Maybe<AssetUpdateOneInlineInput>;\n  endDate?: Maybe<Scalars['Date']>;\n  galleryName?: Maybe<Scalars['String']>;\n  images?: Maybe<AssetUpdateManyInlineInput>;\n  location?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  startDate?: Maybe<Scalars['Date']>;\n  title?: Maybe<Scalars['String']>;\n  type?: Maybe<ExhibitionType>;\n};\n\nexport type ExhibitionUpdateManyInlineInput = {\n  /** Connect multiple existing Exhibition documents */\n  connect?: Maybe<Array<ExhibitionConnectInput>>;\n  /** Create and connect multiple Exhibition documents */\n  create?: Maybe<Array<ExhibitionCreateInput>>;\n  /** Delete multiple Exhibition documents */\n  delete?: Maybe<Array<ExhibitionWhereUniqueInput>>;\n  /** Disconnect multiple Exhibition documents */\n  disconnect?: Maybe<Array<ExhibitionWhereUniqueInput>>;\n  /** Override currently-connected documents with multiple existing Exhibition documents */\n  set?: Maybe<Array<ExhibitionWhereUniqueInput>>;\n  /** Update multiple Exhibition documents */\n  update?: Maybe<Array<ExhibitionUpdateWithNestedWhereUniqueInput>>;\n  /** Upsert multiple Exhibition documents */\n  upsert?: Maybe<Array<ExhibitionUpsertWithNestedWhereUniqueInput>>;\n};\n\nexport type ExhibitionUpdateManyInput = {\n  endDate?: Maybe<Scalars['Date']>;\n  galleryName?: Maybe<Scalars['String']>;\n  location?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  startDate?: Maybe<Scalars['Date']>;\n  title?: Maybe<Scalars['String']>;\n  type?: Maybe<ExhibitionType>;\n};\n\nexport type ExhibitionUpdateManyWithNestedWhereInput = {\n  /** Update many input */\n  data: ExhibitionUpdateManyInput;\n  /** Document search */\n  where: ExhibitionWhereInput;\n};\n\nexport type ExhibitionUpdateOneInlineInput = {\n  /** Connect existing Exhibition document */\n  connect?: Maybe<ExhibitionWhereUniqueInput>;\n  /** Create and connect one Exhibition document */\n  create?: Maybe<ExhibitionCreateInput>;\n  /** Delete currently connected Exhibition document */\n  delete?: Maybe<Scalars['Boolean']>;\n  /** Disconnect currently connected Exhibition document */\n  disconnect?: Maybe<Scalars['Boolean']>;\n  /** Update single Exhibition document */\n  update?: Maybe<ExhibitionUpdateWithNestedWhereUniqueInput>;\n  /** Upsert single Exhibition document */\n  upsert?: Maybe<ExhibitionUpsertWithNestedWhereUniqueInput>;\n};\n\nexport type ExhibitionUpdateWithNestedWhereUniqueInput = {\n  /** Document to update */\n  data: ExhibitionUpdateInput;\n  /** Unique document search */\n  where: ExhibitionWhereUniqueInput;\n};\n\nexport type ExhibitionUpsertInput = {\n  /** Create document if it didn't exist */\n  create: ExhibitionCreateInput;\n  /** Update document if it exists */\n  update: ExhibitionUpdateInput;\n};\n\nexport type ExhibitionUpsertWithNestedWhereUniqueInput = {\n  /** Upsert data */\n  data: ExhibitionUpsertInput;\n  /** Unique document search */\n  where: ExhibitionWhereUniqueInput;\n};\n\n/** Identifies documents */\nexport type ExhibitionWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<ExhibitionWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<ExhibitionWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<ExhibitionWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  about?: Maybe<AssetWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  endDate?: Maybe<Scalars['Date']>;\n  /** All values greater than the given value. */\n  endDate_gt?: Maybe<Scalars['Date']>;\n  /** All values greater than or equal the given value. */\n  endDate_gte?: Maybe<Scalars['Date']>;\n  /** All values that are contained in given list. */\n  endDate_in?: Maybe<Array<Scalars['Date']>>;\n  /** All values less than the given value. */\n  endDate_lt?: Maybe<Scalars['Date']>;\n  /** All values less than or equal the given value. */\n  endDate_lte?: Maybe<Scalars['Date']>;\n  /** All values that are not equal to given value. */\n  endDate_not?: Maybe<Scalars['Date']>;\n  /** All values that are not contained in given list. */\n  endDate_not_in?: Maybe<Array<Scalars['Date']>>;\n  galleryName?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  galleryName_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  galleryName_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  galleryName_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  galleryName_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  galleryName_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  galleryName_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  galleryName_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  galleryName_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  galleryName_starts_with?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  images_every?: Maybe<AssetWhereInput>;\n  images_none?: Maybe<AssetWhereInput>;\n  images_some?: Maybe<AssetWhereInput>;\n  location?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  location_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  location_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  location_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  location_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  location_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  location_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  location_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  location_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  location_starts_with?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  photographerCredit_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  photographerCredit_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  photographerCredit_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  photographerCredit_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  photographerCredit_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  photographerCredit_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  photographerCredit_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  photographerCredit_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  photographerCredit_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  startDate?: Maybe<Scalars['Date']>;\n  /** All values greater than the given value. */\n  startDate_gt?: Maybe<Scalars['Date']>;\n  /** All values greater than or equal the given value. */\n  startDate_gte?: Maybe<Scalars['Date']>;\n  /** All values that are contained in given list. */\n  startDate_in?: Maybe<Array<Scalars['Date']>>;\n  /** All values less than the given value. */\n  startDate_lt?: Maybe<Scalars['Date']>;\n  /** All values less than or equal the given value. */\n  startDate_lte?: Maybe<Scalars['Date']>;\n  /** All values that are not equal to given value. */\n  startDate_not?: Maybe<Scalars['Date']>;\n  /** All values that are not contained in given list. */\n  startDate_not_in?: Maybe<Array<Scalars['Date']>>;\n  title?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  title_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  title_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  title_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  title_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  title_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  title_starts_with?: Maybe<Scalars['String']>;\n  type?: Maybe<ExhibitionType>;\n  /** All values that are contained in given list. */\n  type_in?: Maybe<Array<ExhibitionType>>;\n  /** All values that are not equal to given value. */\n  type_not?: Maybe<ExhibitionType>;\n  /** All values that are not contained in given list. */\n  type_not_in?: Maybe<Array<ExhibitionType>>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n};\n\n/** References Exhibition record uniquely */\nexport type ExhibitionWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport enum ImageFit {\n  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */\n  Clip = 'clip',\n  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */\n  Crop = 'crop',\n  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */\n  Max = 'max',\n  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */\n  Scale = 'scale'\n}\n\nexport type ImageResizeInput = {\n  /** The default value for the fit parameter is fit:clip. */\n  fit?: Maybe<ImageFit>;\n  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */\n  height?: Maybe<Scalars['Int']>;\n  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */\n  width?: Maybe<Scalars['Int']>;\n};\n\n/** Transformations for Images */\nexport type ImageTransformationInput = {\n  /** Resizes the image */\n  resize?: Maybe<ImageResizeInput>;\n};\n\nexport type Info = Node & {\n  __typename?: 'Info';\n  /** The time the document was created */\n  createdAt: Scalars['DateTime'];\n  /** User that created this document */\n  createdBy?: Maybe<User>;\n  cv?: Maybe<Asset>;\n  /** Get the document in other stages */\n  documentInStages: Array<Info>;\n  /** List of Info versions */\n  history: Array<Version>;\n  /** The unique identifier */\n  id: Scalars['ID'];\n  imprint?: Maybe<RichText>;\n  news?: Maybe<RichText>;\n  /** The time the document was published. Null on documents in draft stage. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** User that last published this document */\n  publishedBy?: Maybe<User>;\n  /** System stage field */\n  stage: Stage;\n  /** The time the document was updated */\n  updatedAt: Scalars['DateTime'];\n  /** User that last updated this document */\n  updatedBy?: Maybe<User>;\n};\n\n\nexport type InfoCreatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type InfoCvArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type InfoDocumentInStagesArgs = {\n  includeCurrent?: Scalars['Boolean'];\n  inheritLocale?: Scalars['Boolean'];\n  stages?: Array<Stage>;\n};\n\n\nexport type InfoHistoryArgs = {\n  limit?: Scalars['Int'];\n  skip?: Scalars['Int'];\n  stageOverride?: Maybe<Stage>;\n};\n\n\nexport type InfoPublishedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type InfoUpdatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\nexport type InfoConnectInput = {\n  /** Allow to specify document position in list of connected documents, will default to appending at end of list */\n  position?: Maybe<ConnectPositionInput>;\n  /** Document to connect */\n  where: InfoWhereUniqueInput;\n};\n\n/** A connection to a list of items. */\nexport type InfoConnection = {\n  __typename?: 'InfoConnection';\n  aggregate: Aggregate;\n  /** A list of edges. */\n  edges: Array<InfoEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\nexport type InfoCreateInput = {\n  createdAt?: Maybe<Scalars['DateTime']>;\n  cv?: Maybe<AssetCreateOneInlineInput>;\n  imprint?: Maybe<Scalars['RichTextAST']>;\n  news?: Maybe<Scalars['RichTextAST']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type InfoCreateManyInlineInput = {\n  /** Connect multiple existing Info documents */\n  connect?: Maybe<Array<InfoWhereUniqueInput>>;\n  /** Create and connect multiple existing Info documents */\n  create?: Maybe<Array<InfoCreateInput>>;\n};\n\nexport type InfoCreateOneInlineInput = {\n  /** Connect one existing Info document */\n  connect?: Maybe<InfoWhereUniqueInput>;\n  /** Create and connect one Info document */\n  create?: Maybe<InfoCreateInput>;\n};\n\n/** An edge in a connection. */\nexport type InfoEdge = {\n  __typename?: 'InfoEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Info;\n};\n\n/** Identifies documents */\nexport type InfoManyWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<InfoWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<InfoWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<InfoWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  cv?: Maybe<AssetWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n};\n\nexport enum InfoOrderByInput {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  PublishedAtAsc = 'publishedAt_ASC',\n  PublishedAtDesc = 'publishedAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type InfoUpdateInput = {\n  cv?: Maybe<AssetUpdateOneInlineInput>;\n  imprint?: Maybe<Scalars['RichTextAST']>;\n  news?: Maybe<Scalars['RichTextAST']>;\n};\n\nexport type InfoUpdateManyInlineInput = {\n  /** Connect multiple existing Info documents */\n  connect?: Maybe<Array<InfoConnectInput>>;\n  /** Create and connect multiple Info documents */\n  create?: Maybe<Array<InfoCreateInput>>;\n  /** Delete multiple Info documents */\n  delete?: Maybe<Array<InfoWhereUniqueInput>>;\n  /** Disconnect multiple Info documents */\n  disconnect?: Maybe<Array<InfoWhereUniqueInput>>;\n  /** Override currently-connected documents with multiple existing Info documents */\n  set?: Maybe<Array<InfoWhereUniqueInput>>;\n  /** Update multiple Info documents */\n  update?: Maybe<Array<InfoUpdateWithNestedWhereUniqueInput>>;\n  /** Upsert multiple Info documents */\n  upsert?: Maybe<Array<InfoUpsertWithNestedWhereUniqueInput>>;\n};\n\nexport type InfoUpdateManyInput = {\n  imprint?: Maybe<Scalars['RichTextAST']>;\n  news?: Maybe<Scalars['RichTextAST']>;\n};\n\nexport type InfoUpdateManyWithNestedWhereInput = {\n  /** Update many input */\n  data: InfoUpdateManyInput;\n  /** Document search */\n  where: InfoWhereInput;\n};\n\nexport type InfoUpdateOneInlineInput = {\n  /** Connect existing Info document */\n  connect?: Maybe<InfoWhereUniqueInput>;\n  /** Create and connect one Info document */\n  create?: Maybe<InfoCreateInput>;\n  /** Delete currently connected Info document */\n  delete?: Maybe<Scalars['Boolean']>;\n  /** Disconnect currently connected Info document */\n  disconnect?: Maybe<Scalars['Boolean']>;\n  /** Update single Info document */\n  update?: Maybe<InfoUpdateWithNestedWhereUniqueInput>;\n  /** Upsert single Info document */\n  upsert?: Maybe<InfoUpsertWithNestedWhereUniqueInput>;\n};\n\nexport type InfoUpdateWithNestedWhereUniqueInput = {\n  /** Document to update */\n  data: InfoUpdateInput;\n  /** Unique document search */\n  where: InfoWhereUniqueInput;\n};\n\nexport type InfoUpsertInput = {\n  /** Create document if it didn't exist */\n  create: InfoCreateInput;\n  /** Update document if it exists */\n  update: InfoUpdateInput;\n};\n\nexport type InfoUpsertWithNestedWhereUniqueInput = {\n  /** Upsert data */\n  data: InfoUpsertInput;\n  /** Unique document search */\n  where: InfoWhereUniqueInput;\n};\n\n/** Identifies documents */\nexport type InfoWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<InfoWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<InfoWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<InfoWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  cv?: Maybe<AssetWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n};\n\n/** References Info record uniquely */\nexport type InfoWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type Installation = Node & {\n  __typename?: 'Installation';\n  /** The time the document was created */\n  createdAt: Scalars['DateTime'];\n  /** User that created this document */\n  createdBy?: Maybe<User>;\n  /** Get the document in other stages */\n  documentInStages: Array<Installation>;\n  /** List of Installation versions */\n  history: Array<Version>;\n  /** The unique identifier */\n  id: Scalars['ID'];\n  images: Array<Asset>;\n  location?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  /** The time the document was published. Null on documents in draft stage. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** User that last published this document */\n  publishedBy?: Maybe<User>;\n  /** System stage field */\n  stage: Stage;\n  title?: Maybe<Scalars['String']>;\n  /** The time the document was updated */\n  updatedAt: Scalars['DateTime'];\n  /** User that last updated this document */\n  updatedBy?: Maybe<User>;\n  year?: Maybe<Scalars['Date']>;\n};\n\n\nexport type InstallationCreatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type InstallationDocumentInStagesArgs = {\n  includeCurrent?: Scalars['Boolean'];\n  inheritLocale?: Scalars['Boolean'];\n  stages?: Array<Stage>;\n};\n\n\nexport type InstallationHistoryArgs = {\n  limit?: Scalars['Int'];\n  skip?: Scalars['Int'];\n  stageOverride?: Maybe<Stage>;\n};\n\n\nexport type InstallationImagesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  orderBy?: Maybe<AssetOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<AssetWhereInput>;\n};\n\n\nexport type InstallationPublishedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type InstallationUpdatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\nexport type InstallationConnectInput = {\n  /** Allow to specify document position in list of connected documents, will default to appending at end of list */\n  position?: Maybe<ConnectPositionInput>;\n  /** Document to connect */\n  where: InstallationWhereUniqueInput;\n};\n\n/** A connection to a list of items. */\nexport type InstallationConnection = {\n  __typename?: 'InstallationConnection';\n  aggregate: Aggregate;\n  /** A list of edges. */\n  edges: Array<InstallationEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\nexport type InstallationCreateInput = {\n  createdAt?: Maybe<Scalars['DateTime']>;\n  images?: Maybe<AssetCreateManyInlineInput>;\n  location?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  year?: Maybe<Scalars['Date']>;\n};\n\nexport type InstallationCreateManyInlineInput = {\n  /** Connect multiple existing Installation documents */\n  connect?: Maybe<Array<InstallationWhereUniqueInput>>;\n  /** Create and connect multiple existing Installation documents */\n  create?: Maybe<Array<InstallationCreateInput>>;\n};\n\nexport type InstallationCreateOneInlineInput = {\n  /** Connect one existing Installation document */\n  connect?: Maybe<InstallationWhereUniqueInput>;\n  /** Create and connect one Installation document */\n  create?: Maybe<InstallationCreateInput>;\n};\n\n/** An edge in a connection. */\nexport type InstallationEdge = {\n  __typename?: 'InstallationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Installation;\n};\n\n/** Identifies documents */\nexport type InstallationManyWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<InstallationWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<InstallationWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<InstallationWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  images_every?: Maybe<AssetWhereInput>;\n  images_none?: Maybe<AssetWhereInput>;\n  images_some?: Maybe<AssetWhereInput>;\n  location?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  location_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  location_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  location_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  location_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  location_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  location_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  location_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  location_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  location_starts_with?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  materials_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  materials_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  materials_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  materials_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  materials_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  materials_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  materials_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  materials_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  materials_starts_with?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  photographerCredit_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  photographerCredit_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  photographerCredit_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  photographerCredit_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  photographerCredit_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  photographerCredit_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  photographerCredit_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  photographerCredit_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  photographerCredit_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  title?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  title_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  title_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  title_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  title_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  title_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  title_starts_with?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n  year?: Maybe<Scalars['Date']>;\n  /** All values greater than the given value. */\n  year_gt?: Maybe<Scalars['Date']>;\n  /** All values greater than or equal the given value. */\n  year_gte?: Maybe<Scalars['Date']>;\n  /** All values that are contained in given list. */\n  year_in?: Maybe<Array<Scalars['Date']>>;\n  /** All values less than the given value. */\n  year_lt?: Maybe<Scalars['Date']>;\n  /** All values less than or equal the given value. */\n  year_lte?: Maybe<Scalars['Date']>;\n  /** All values that are not equal to given value. */\n  year_not?: Maybe<Scalars['Date']>;\n  /** All values that are not contained in given list. */\n  year_not_in?: Maybe<Array<Scalars['Date']>>;\n};\n\nexport enum InstallationOrderByInput {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  LocationAsc = 'location_ASC',\n  LocationDesc = 'location_DESC',\n  MaterialsAsc = 'materials_ASC',\n  MaterialsDesc = 'materials_DESC',\n  PhotographerCreditAsc = 'photographerCredit_ASC',\n  PhotographerCreditDesc = 'photographerCredit_DESC',\n  PublishedAtAsc = 'publishedAt_ASC',\n  PublishedAtDesc = 'publishedAt_DESC',\n  TitleAsc = 'title_ASC',\n  TitleDesc = 'title_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC',\n  YearAsc = 'year_ASC',\n  YearDesc = 'year_DESC'\n}\n\nexport type InstallationUpdateInput = {\n  images?: Maybe<AssetUpdateManyInlineInput>;\n  location?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  year?: Maybe<Scalars['Date']>;\n};\n\nexport type InstallationUpdateManyInlineInput = {\n  /** Connect multiple existing Installation documents */\n  connect?: Maybe<Array<InstallationConnectInput>>;\n  /** Create and connect multiple Installation documents */\n  create?: Maybe<Array<InstallationCreateInput>>;\n  /** Delete multiple Installation documents */\n  delete?: Maybe<Array<InstallationWhereUniqueInput>>;\n  /** Disconnect multiple Installation documents */\n  disconnect?: Maybe<Array<InstallationWhereUniqueInput>>;\n  /** Override currently-connected documents with multiple existing Installation documents */\n  set?: Maybe<Array<InstallationWhereUniqueInput>>;\n  /** Update multiple Installation documents */\n  update?: Maybe<Array<InstallationUpdateWithNestedWhereUniqueInput>>;\n  /** Upsert multiple Installation documents */\n  upsert?: Maybe<Array<InstallationUpsertWithNestedWhereUniqueInput>>;\n};\n\nexport type InstallationUpdateManyInput = {\n  location?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  year?: Maybe<Scalars['Date']>;\n};\n\nexport type InstallationUpdateManyWithNestedWhereInput = {\n  /** Update many input */\n  data: InstallationUpdateManyInput;\n  /** Document search */\n  where: InstallationWhereInput;\n};\n\nexport type InstallationUpdateOneInlineInput = {\n  /** Connect existing Installation document */\n  connect?: Maybe<InstallationWhereUniqueInput>;\n  /** Create and connect one Installation document */\n  create?: Maybe<InstallationCreateInput>;\n  /** Delete currently connected Installation document */\n  delete?: Maybe<Scalars['Boolean']>;\n  /** Disconnect currently connected Installation document */\n  disconnect?: Maybe<Scalars['Boolean']>;\n  /** Update single Installation document */\n  update?: Maybe<InstallationUpdateWithNestedWhereUniqueInput>;\n  /** Upsert single Installation document */\n  upsert?: Maybe<InstallationUpsertWithNestedWhereUniqueInput>;\n};\n\nexport type InstallationUpdateWithNestedWhereUniqueInput = {\n  /** Document to update */\n  data: InstallationUpdateInput;\n  /** Unique document search */\n  where: InstallationWhereUniqueInput;\n};\n\nexport type InstallationUpsertInput = {\n  /** Create document if it didn't exist */\n  create: InstallationCreateInput;\n  /** Update document if it exists */\n  update: InstallationUpdateInput;\n};\n\nexport type InstallationUpsertWithNestedWhereUniqueInput = {\n  /** Upsert data */\n  data: InstallationUpsertInput;\n  /** Unique document search */\n  where: InstallationWhereUniqueInput;\n};\n\n/** Identifies documents */\nexport type InstallationWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<InstallationWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<InstallationWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<InstallationWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  images_every?: Maybe<AssetWhereInput>;\n  images_none?: Maybe<AssetWhereInput>;\n  images_some?: Maybe<AssetWhereInput>;\n  location?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  location_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  location_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  location_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  location_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  location_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  location_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  location_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  location_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  location_starts_with?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  materials_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  materials_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  materials_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  materials_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  materials_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  materials_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  materials_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  materials_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  materials_starts_with?: Maybe<Scalars['String']>;\n  photographerCredit?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  photographerCredit_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  photographerCredit_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  photographerCredit_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  photographerCredit_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  photographerCredit_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  photographerCredit_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  photographerCredit_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  photographerCredit_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  photographerCredit_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  title?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  title_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  title_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  title_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  title_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  title_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  title_starts_with?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n  year?: Maybe<Scalars['Date']>;\n  /** All values greater than the given value. */\n  year_gt?: Maybe<Scalars['Date']>;\n  /** All values greater than or equal the given value. */\n  year_gte?: Maybe<Scalars['Date']>;\n  /** All values that are contained in given list. */\n  year_in?: Maybe<Array<Scalars['Date']>>;\n  /** All values less than the given value. */\n  year_lt?: Maybe<Scalars['Date']>;\n  /** All values less than or equal the given value. */\n  year_lte?: Maybe<Scalars['Date']>;\n  /** All values that are not equal to given value. */\n  year_not?: Maybe<Scalars['Date']>;\n  /** All values that are not contained in given list. */\n  year_not_in?: Maybe<Array<Scalars['Date']>>;\n};\n\n/** References Installation record uniquely */\nexport type InstallationWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\n/** Locale system enumeration */\nexport enum Locale {\n  /** System locale */\n  En = 'en'\n}\n\n/** Representing a geolocation point with latitude and longitude */\nexport type Location = {\n  __typename?: 'Location';\n  distance: Scalars['Float'];\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\n\n/** Representing a geolocation point with latitude and longitude */\nexport type LocationDistanceArgs = {\n  from: LocationInput;\n};\n\n/** Input for a geolocation point with latitude and longitude */\nexport type LocationInput = {\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /**\n   * Create one asset\n   * @deprecated Asset mutations will be overhauled soon\n   */\n  createAsset?: Maybe<Asset>;\n  /** Create one exhibition */\n  createExhibition?: Maybe<Exhibition>;\n  /** Create one info */\n  createInfo?: Maybe<Info>;\n  /** Create one installation */\n  createInstallation?: Maybe<Installation>;\n  /** Create one social */\n  createSocial?: Maybe<Social>;\n  /** Create one video */\n  createVideo?: Maybe<Video>;\n  /** Delete one asset from _all_ existing stages. Returns deleted document. */\n  deleteAsset?: Maybe<Asset>;\n  /** Delete one exhibition from _all_ existing stages. Returns deleted document. */\n  deleteExhibition?: Maybe<Exhibition>;\n  /** Delete one info from _all_ existing stages. Returns deleted document. */\n  deleteInfo?: Maybe<Info>;\n  /** Delete one installation from _all_ existing stages. Returns deleted document. */\n  deleteInstallation?: Maybe<Installation>;\n  /**\n   * Delete many Asset documents\n   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)\n   */\n  deleteManyAssets: BatchPayload;\n  /** Delete many Asset documents, return deleted documents */\n  deleteManyAssetsConnection: AssetConnection;\n  /**\n   * Delete many Exhibition documents\n   * @deprecated Please use the new paginated many mutation (deleteManyExhibitionsConnection)\n   */\n  deleteManyExhibitions: BatchPayload;\n  /** Delete many Exhibition documents, return deleted documents */\n  deleteManyExhibitionsConnection: ExhibitionConnection;\n  /**\n   * Delete many Info documents\n   * @deprecated Please use the new paginated many mutation (deleteManyInfosConnection)\n   */\n  deleteManyInfos: BatchPayload;\n  /** Delete many Info documents, return deleted documents */\n  deleteManyInfosConnection: InfoConnection;\n  /**\n   * Delete many Installation documents\n   * @deprecated Please use the new paginated many mutation (deleteManyInstallationsConnection)\n   */\n  deleteManyInstallations: BatchPayload;\n  /** Delete many Installation documents, return deleted documents */\n  deleteManyInstallationsConnection: InstallationConnection;\n  /**\n   * Delete many Social documents\n   * @deprecated Please use the new paginated many mutation (deleteManySocialsConnection)\n   */\n  deleteManySocials: BatchPayload;\n  /** Delete many Social documents, return deleted documents */\n  deleteManySocialsConnection: SocialConnection;\n  /**\n   * Delete many Video documents\n   * @deprecated Please use the new paginated many mutation (deleteManyVideosConnection)\n   */\n  deleteManyVideos: BatchPayload;\n  /** Delete many Video documents, return deleted documents */\n  deleteManyVideosConnection: VideoConnection;\n  /** Delete one social from _all_ existing stages. Returns deleted document. */\n  deleteSocial?: Maybe<Social>;\n  /** Delete one video from _all_ existing stages. Returns deleted document. */\n  deleteVideo?: Maybe<Video>;\n  /** Publish one asset */\n  publishAsset?: Maybe<Asset>;\n  /** Publish one exhibition */\n  publishExhibition?: Maybe<Exhibition>;\n  /** Publish one info */\n  publishInfo?: Maybe<Info>;\n  /** Publish one installation */\n  publishInstallation?: Maybe<Installation>;\n  /**\n   * Publish many Asset documents\n   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)\n   */\n  publishManyAssets: BatchPayload;\n  /** Publish many Asset documents */\n  publishManyAssetsConnection: AssetConnection;\n  /**\n   * Publish many Exhibition documents\n   * @deprecated Please use the new paginated many mutation (publishManyExhibitionsConnection)\n   */\n  publishManyExhibitions: BatchPayload;\n  /** Publish many Exhibition documents */\n  publishManyExhibitionsConnection: ExhibitionConnection;\n  /**\n   * Publish many Info documents\n   * @deprecated Please use the new paginated many mutation (publishManyInfosConnection)\n   */\n  publishManyInfos: BatchPayload;\n  /** Publish many Info documents */\n  publishManyInfosConnection: InfoConnection;\n  /**\n   * Publish many Installation documents\n   * @deprecated Please use the new paginated many mutation (publishManyInstallationsConnection)\n   */\n  publishManyInstallations: BatchPayload;\n  /** Publish many Installation documents */\n  publishManyInstallationsConnection: InstallationConnection;\n  /**\n   * Publish many Social documents\n   * @deprecated Please use the new paginated many mutation (publishManySocialsConnection)\n   */\n  publishManySocials: BatchPayload;\n  /** Publish many Social documents */\n  publishManySocialsConnection: SocialConnection;\n  /**\n   * Publish many Video documents\n   * @deprecated Please use the new paginated many mutation (publishManyVideosConnection)\n   */\n  publishManyVideos: BatchPayload;\n  /** Publish many Video documents */\n  publishManyVideosConnection: VideoConnection;\n  /** Publish one social */\n  publishSocial?: Maybe<Social>;\n  /** Publish one video */\n  publishVideo?: Maybe<Video>;\n  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */\n  unpublishAsset?: Maybe<Asset>;\n  /** Unpublish one exhibition from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */\n  unpublishExhibition?: Maybe<Exhibition>;\n  /** Unpublish one info from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */\n  unpublishInfo?: Maybe<Info>;\n  /** Unpublish one installation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */\n  unpublishInstallation?: Maybe<Installation>;\n  /**\n   * Unpublish many Asset documents\n   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)\n   */\n  unpublishManyAssets: BatchPayload;\n  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */\n  unpublishManyAssetsConnection: AssetConnection;\n  /**\n   * Unpublish many Exhibition documents\n   * @deprecated Please use the new paginated many mutation (unpublishManyExhibitionsConnection)\n   */\n  unpublishManyExhibitions: BatchPayload;\n  /** Find many Exhibition documents that match criteria in specified stage and unpublish from target stages */\n  unpublishManyExhibitionsConnection: ExhibitionConnection;\n  /**\n   * Unpublish many Info documents\n   * @deprecated Please use the new paginated many mutation (unpublishManyInfosConnection)\n   */\n  unpublishManyInfos: BatchPayload;\n  /** Find many Info documents that match criteria in specified stage and unpublish from target stages */\n  unpublishManyInfosConnection: InfoConnection;\n  /**\n   * Unpublish many Installation documents\n   * @deprecated Please use the new paginated many mutation (unpublishManyInstallationsConnection)\n   */\n  unpublishManyInstallations: BatchPayload;\n  /** Find many Installation documents that match criteria in specified stage and unpublish from target stages */\n  unpublishManyInstallationsConnection: InstallationConnection;\n  /**\n   * Unpublish many Social documents\n   * @deprecated Please use the new paginated many mutation (unpublishManySocialsConnection)\n   */\n  unpublishManySocials: BatchPayload;\n  /** Find many Social documents that match criteria in specified stage and unpublish from target stages */\n  unpublishManySocialsConnection: SocialConnection;\n  /**\n   * Unpublish many Video documents\n   * @deprecated Please use the new paginated many mutation (unpublishManyVideosConnection)\n   */\n  unpublishManyVideos: BatchPayload;\n  /** Find many Video documents that match criteria in specified stage and unpublish from target stages */\n  unpublishManyVideosConnection: VideoConnection;\n  /** Unpublish one social from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */\n  unpublishSocial?: Maybe<Social>;\n  /** Unpublish one video from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */\n  unpublishVideo?: Maybe<Video>;\n  /** Update one asset */\n  updateAsset?: Maybe<Asset>;\n  /** Update one exhibition */\n  updateExhibition?: Maybe<Exhibition>;\n  /** Update one info */\n  updateInfo?: Maybe<Info>;\n  /** Update one installation */\n  updateInstallation?: Maybe<Installation>;\n  /**\n   * Update many assets\n   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)\n   */\n  updateManyAssets: BatchPayload;\n  /** Update many Asset documents */\n  updateManyAssetsConnection: AssetConnection;\n  /**\n   * Update many exhibitions\n   * @deprecated Please use the new paginated many mutation (updateManyExhibitionsConnection)\n   */\n  updateManyExhibitions: BatchPayload;\n  /** Update many Exhibition documents */\n  updateManyExhibitionsConnection: ExhibitionConnection;\n  /**\n   * Update many infos\n   * @deprecated Please use the new paginated many mutation (updateManyInfosConnection)\n   */\n  updateManyInfos: BatchPayload;\n  /** Update many Info documents */\n  updateManyInfosConnection: InfoConnection;\n  /**\n   * Update many installations\n   * @deprecated Please use the new paginated many mutation (updateManyInstallationsConnection)\n   */\n  updateManyInstallations: BatchPayload;\n  /** Update many Installation documents */\n  updateManyInstallationsConnection: InstallationConnection;\n  /**\n   * Update many socials\n   * @deprecated Please use the new paginated many mutation (updateManySocialsConnection)\n   */\n  updateManySocials: BatchPayload;\n  /** Update many Social documents */\n  updateManySocialsConnection: SocialConnection;\n  /**\n   * Update many videos\n   * @deprecated Please use the new paginated many mutation (updateManyVideosConnection)\n   */\n  updateManyVideos: BatchPayload;\n  /** Update many Video documents */\n  updateManyVideosConnection: VideoConnection;\n  /** Update one social */\n  updateSocial?: Maybe<Social>;\n  /** Update one video */\n  updateVideo?: Maybe<Video>;\n  /** Upsert one asset */\n  upsertAsset?: Maybe<Asset>;\n  /** Upsert one exhibition */\n  upsertExhibition?: Maybe<Exhibition>;\n  /** Upsert one info */\n  upsertInfo?: Maybe<Info>;\n  /** Upsert one installation */\n  upsertInstallation?: Maybe<Installation>;\n  /** Upsert one social */\n  upsertSocial?: Maybe<Social>;\n  /** Upsert one video */\n  upsertVideo?: Maybe<Video>;\n};\n\n\nexport type MutationCreateAssetArgs = {\n  data: AssetCreateInput;\n};\n\n\nexport type MutationCreateExhibitionArgs = {\n  data: ExhibitionCreateInput;\n};\n\n\nexport type MutationCreateInfoArgs = {\n  data: InfoCreateInput;\n};\n\n\nexport type MutationCreateInstallationArgs = {\n  data: InstallationCreateInput;\n};\n\n\nexport type MutationCreateSocialArgs = {\n  data: SocialCreateInput;\n};\n\n\nexport type MutationCreateVideoArgs = {\n  data: VideoCreateInput;\n};\n\n\nexport type MutationDeleteAssetArgs = {\n  where: AssetWhereUniqueInput;\n};\n\n\nexport type MutationDeleteExhibitionArgs = {\n  where: ExhibitionWhereUniqueInput;\n};\n\n\nexport type MutationDeleteInfoArgs = {\n  where: InfoWhereUniqueInput;\n};\n\n\nexport type MutationDeleteInstallationArgs = {\n  where: InstallationWhereUniqueInput;\n};\n\n\nexport type MutationDeleteManyAssetsArgs = {\n  where?: Maybe<AssetManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyAssetsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<AssetManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyExhibitionsArgs = {\n  where?: Maybe<ExhibitionManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyExhibitionsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<ExhibitionManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyInfosArgs = {\n  where?: Maybe<InfoManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyInfosConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<InfoManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyInstallationsArgs = {\n  where?: Maybe<InstallationManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyInstallationsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<InstallationManyWhereInput>;\n};\n\n\nexport type MutationDeleteManySocialsArgs = {\n  where?: Maybe<SocialManyWhereInput>;\n};\n\n\nexport type MutationDeleteManySocialsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<SocialManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyVideosArgs = {\n  where?: Maybe<VideoManyWhereInput>;\n};\n\n\nexport type MutationDeleteManyVideosConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<VideoManyWhereInput>;\n};\n\n\nexport type MutationDeleteSocialArgs = {\n  where: SocialWhereUniqueInput;\n};\n\n\nexport type MutationDeleteVideoArgs = {\n  where: VideoWhereUniqueInput;\n};\n\n\nexport type MutationPublishAssetArgs = {\n  locales?: Maybe<Array<Locale>>;\n  publishBase?: Maybe<Scalars['Boolean']>;\n  to?: Array<Stage>;\n  where: AssetWhereUniqueInput;\n  withDefaultLocale?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationPublishExhibitionArgs = {\n  to?: Array<Stage>;\n  where: ExhibitionWhereUniqueInput;\n};\n\n\nexport type MutationPublishInfoArgs = {\n  to?: Array<Stage>;\n  where: InfoWhereUniqueInput;\n};\n\n\nexport type MutationPublishInstallationArgs = {\n  to?: Array<Stage>;\n  where: InstallationWhereUniqueInput;\n};\n\n\nexport type MutationPublishManyAssetsArgs = {\n  locales?: Maybe<Array<Locale>>;\n  publishBase?: Maybe<Scalars['Boolean']>;\n  to?: Array<Stage>;\n  where?: Maybe<AssetManyWhereInput>;\n  withDefaultLocale?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationPublishManyAssetsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Maybe<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  publishBase?: Maybe<Scalars['Boolean']>;\n  skip?: Maybe<Scalars['Int']>;\n  to?: Array<Stage>;\n  where?: Maybe<AssetManyWhereInput>;\n  withDefaultLocale?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationPublishManyExhibitionsArgs = {\n  to?: Array<Stage>;\n  where?: Maybe<ExhibitionManyWhereInput>;\n};\n\n\nexport type MutationPublishManyExhibitionsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Maybe<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  to?: Array<Stage>;\n  where?: Maybe<ExhibitionManyWhereInput>;\n};\n\n\nexport type MutationPublishManyInfosArgs = {\n  to?: Array<Stage>;\n  where?: Maybe<InfoManyWhereInput>;\n};\n\n\nexport type MutationPublishManyInfosConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Maybe<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  to?: Array<Stage>;\n  where?: Maybe<InfoManyWhereInput>;\n};\n\n\nexport type MutationPublishManyInstallationsArgs = {\n  to?: Array<Stage>;\n  where?: Maybe<InstallationManyWhereInput>;\n};\n\n\nexport type MutationPublishManyInstallationsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Maybe<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  to?: Array<Stage>;\n  where?: Maybe<InstallationManyWhereInput>;\n};\n\n\nexport type MutationPublishManySocialsArgs = {\n  to?: Array<Stage>;\n  where?: Maybe<SocialManyWhereInput>;\n};\n\n\nexport type MutationPublishManySocialsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Maybe<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  to?: Array<Stage>;\n  where?: Maybe<SocialManyWhereInput>;\n};\n\n\nexport type MutationPublishManyVideosArgs = {\n  to?: Array<Stage>;\n  where?: Maybe<VideoManyWhereInput>;\n};\n\n\nexport type MutationPublishManyVideosConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Maybe<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  to?: Array<Stage>;\n  where?: Maybe<VideoManyWhereInput>;\n};\n\n\nexport type MutationPublishSocialArgs = {\n  to?: Array<Stage>;\n  where: SocialWhereUniqueInput;\n};\n\n\nexport type MutationPublishVideoArgs = {\n  to?: Array<Stage>;\n  where: VideoWhereUniqueInput;\n};\n\n\nexport type MutationUnpublishAssetArgs = {\n  from?: Array<Stage>;\n  locales?: Maybe<Array<Locale>>;\n  unpublishBase?: Maybe<Scalars['Boolean']>;\n  where: AssetWhereUniqueInput;\n};\n\n\nexport type MutationUnpublishExhibitionArgs = {\n  from?: Array<Stage>;\n  where: ExhibitionWhereUniqueInput;\n};\n\n\nexport type MutationUnpublishInfoArgs = {\n  from?: Array<Stage>;\n  where: InfoWhereUniqueInput;\n};\n\n\nexport type MutationUnpublishInstallationArgs = {\n  from?: Array<Stage>;\n  where: InstallationWhereUniqueInput;\n};\n\n\nexport type MutationUnpublishManyAssetsArgs = {\n  from?: Array<Stage>;\n  locales?: Maybe<Array<Locale>>;\n  unpublishBase?: Maybe<Scalars['Boolean']>;\n  where?: Maybe<AssetManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyAssetsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Array<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Maybe<Array<Locale>>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Maybe<Stage>;\n  unpublishBase?: Maybe<Scalars['Boolean']>;\n  where?: Maybe<AssetManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyExhibitionsArgs = {\n  from?: Array<Stage>;\n  where?: Maybe<ExhibitionManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyExhibitionsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Array<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Maybe<Stage>;\n  where?: Maybe<ExhibitionManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyInfosArgs = {\n  from?: Array<Stage>;\n  where?: Maybe<InfoManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyInfosConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Array<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Maybe<Stage>;\n  where?: Maybe<InfoManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyInstallationsArgs = {\n  from?: Array<Stage>;\n  where?: Maybe<InstallationManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyInstallationsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Array<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Maybe<Stage>;\n  where?: Maybe<InstallationManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManySocialsArgs = {\n  from?: Array<Stage>;\n  where?: Maybe<SocialManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManySocialsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Array<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Maybe<Stage>;\n  where?: Maybe<SocialManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyVideosArgs = {\n  from?: Array<Stage>;\n  where?: Maybe<VideoManyWhereInput>;\n};\n\n\nexport type MutationUnpublishManyVideosConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  first?: Maybe<Scalars['Int']>;\n  from?: Array<Stage>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Maybe<Stage>;\n  where?: Maybe<VideoManyWhereInput>;\n};\n\n\nexport type MutationUnpublishSocialArgs = {\n  from?: Array<Stage>;\n  where: SocialWhereUniqueInput;\n};\n\n\nexport type MutationUnpublishVideoArgs = {\n  from?: Array<Stage>;\n  where: VideoWhereUniqueInput;\n};\n\n\nexport type MutationUpdateAssetArgs = {\n  data: AssetUpdateInput;\n  where: AssetWhereUniqueInput;\n};\n\n\nexport type MutationUpdateExhibitionArgs = {\n  data: ExhibitionUpdateInput;\n  where: ExhibitionWhereUniqueInput;\n};\n\n\nexport type MutationUpdateInfoArgs = {\n  data: InfoUpdateInput;\n  where: InfoWhereUniqueInput;\n};\n\n\nexport type MutationUpdateInstallationArgs = {\n  data: InstallationUpdateInput;\n  where: InstallationWhereUniqueInput;\n};\n\n\nexport type MutationUpdateManyAssetsArgs = {\n  data: AssetUpdateManyInput;\n  where?: Maybe<AssetManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyAssetsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  data: AssetUpdateManyInput;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<AssetManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyExhibitionsArgs = {\n  data: ExhibitionUpdateManyInput;\n  where?: Maybe<ExhibitionManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyExhibitionsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  data: ExhibitionUpdateManyInput;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<ExhibitionManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyInfosArgs = {\n  data: InfoUpdateManyInput;\n  where?: Maybe<InfoManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyInfosConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  data: InfoUpdateManyInput;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<InfoManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyInstallationsArgs = {\n  data: InstallationUpdateManyInput;\n  where?: Maybe<InstallationManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyInstallationsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  data: InstallationUpdateManyInput;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<InstallationManyWhereInput>;\n};\n\n\nexport type MutationUpdateManySocialsArgs = {\n  data: SocialUpdateManyInput;\n  where?: Maybe<SocialManyWhereInput>;\n};\n\n\nexport type MutationUpdateManySocialsConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  data: SocialUpdateManyInput;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<SocialManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyVideosArgs = {\n  data: VideoUpdateManyInput;\n  where?: Maybe<VideoManyWhereInput>;\n};\n\n\nexport type MutationUpdateManyVideosConnectionArgs = {\n  after?: Maybe<Scalars['ID']>;\n  before?: Maybe<Scalars['ID']>;\n  data: VideoUpdateManyInput;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n  where?: Maybe<VideoManyWhereInput>;\n};\n\n\nexport type MutationUpdateSocialArgs = {\n  data: SocialUpdateInput;\n  where: SocialWhereUniqueInput;\n};\n\n\nexport type MutationUpdateVideoArgs = {\n  data: VideoUpdateInput;\n  where: VideoWhereUniqueInput;\n};\n\n\nexport type MutationUpsertAssetArgs = {\n  upsert: AssetUpsertInput;\n  where: AssetWhereUniqueInput;\n};\n\n\nexport type MutationUpsertExhibitionArgs = {\n  upsert: ExhibitionUpsertInput;\n  where: ExhibitionWhereUniqueInput;\n};\n\n\nexport type MutationUpsertInfoArgs = {\n  upsert: InfoUpsertInput;\n  where: InfoWhereUniqueInput;\n};\n\n\nexport type MutationUpsertInstallationArgs = {\n  upsert: InstallationUpsertInput;\n  where: InstallationWhereUniqueInput;\n};\n\n\nexport type MutationUpsertSocialArgs = {\n  upsert: SocialUpsertInput;\n  where: SocialWhereUniqueInput;\n};\n\n\nexport type MutationUpsertVideoArgs = {\n  upsert: VideoUpsertInput;\n  where: VideoWhereUniqueInput;\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The id of the object. */\n  id: Scalars['ID'];\n  /** The Stage of an object */\n  stage: Stage;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** Number of items in the current page. */\n  pageSize?: Maybe<Scalars['Int']>;\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PublishLocaleInput = {\n  /** Locales to publish */\n  locale: Locale;\n  /** Stages to publish selected locales to */\n  stages: Array<Stage>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Retrieve a single asset */\n  asset?: Maybe<Asset>;\n  /** Retrieve document version */\n  assetVersion?: Maybe<DocumentVersion>;\n  /** Retrieve multiple assets */\n  assets: Array<Asset>;\n  /** Retrieve multiple assets using the Relay connection interface */\n  assetsConnection: AssetConnection;\n  /** Retrieve a single exhibition */\n  exhibition?: Maybe<Exhibition>;\n  /** Retrieve document version */\n  exhibitionVersion?: Maybe<DocumentVersion>;\n  /** Retrieve multiple exhibitions */\n  exhibitions: Array<Exhibition>;\n  /** Retrieve multiple exhibitions using the Relay connection interface */\n  exhibitionsConnection: ExhibitionConnection;\n  /** Retrieve a single info */\n  info?: Maybe<Info>;\n  /** Retrieve document version */\n  infoVersion?: Maybe<DocumentVersion>;\n  /** Retrieve multiple infos */\n  infos: Array<Info>;\n  /** Retrieve multiple infos using the Relay connection interface */\n  infosConnection: InfoConnection;\n  /** Retrieve a single installation */\n  installation?: Maybe<Installation>;\n  /** Retrieve document version */\n  installationVersion?: Maybe<DocumentVersion>;\n  /** Retrieve multiple installations */\n  installations: Array<Installation>;\n  /** Retrieve multiple installations using the Relay connection interface */\n  installationsConnection: InstallationConnection;\n  /** Fetches an object given its ID */\n  node?: Maybe<Node>;\n  /** Retrieve a single social */\n  social?: Maybe<Social>;\n  /** Retrieve document version */\n  socialVersion?: Maybe<DocumentVersion>;\n  /** Retrieve multiple socials */\n  socials: Array<Social>;\n  /** Retrieve multiple socials using the Relay connection interface */\n  socialsConnection: SocialConnection;\n  /** Retrieve a single user */\n  user?: Maybe<User>;\n  /** Retrieve multiple users */\n  users: Array<User>;\n  /** Retrieve multiple users using the Relay connection interface */\n  usersConnection: UserConnection;\n  /** Retrieve a single video */\n  video?: Maybe<Video>;\n  /** Retrieve document version */\n  videoVersion?: Maybe<DocumentVersion>;\n  /** Retrieve multiple videos */\n  videos: Array<Video>;\n  /** Retrieve multiple videos using the Relay connection interface */\n  videosConnection: VideoConnection;\n};\n\n\nexport type QueryAssetArgs = {\n  locales?: Array<Locale>;\n  stage?: Stage;\n  where: AssetWhereUniqueInput;\n};\n\n\nexport type QueryAssetVersionArgs = {\n  where: VersionWhereInput;\n};\n\n\nexport type QueryAssetsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<AssetOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<AssetWhereInput>;\n};\n\n\nexport type QueryAssetsConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<AssetOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<AssetWhereInput>;\n};\n\n\nexport type QueryExhibitionArgs = {\n  locales?: Array<Locale>;\n  stage?: Stage;\n  where: ExhibitionWhereUniqueInput;\n};\n\n\nexport type QueryExhibitionVersionArgs = {\n  where: VersionWhereInput;\n};\n\n\nexport type QueryExhibitionsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<ExhibitionOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<ExhibitionWhereInput>;\n};\n\n\nexport type QueryExhibitionsConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<ExhibitionOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<ExhibitionWhereInput>;\n};\n\n\nexport type QueryInfoArgs = {\n  locales?: Array<Locale>;\n  stage?: Stage;\n  where: InfoWhereUniqueInput;\n};\n\n\nexport type QueryInfoVersionArgs = {\n  where: VersionWhereInput;\n};\n\n\nexport type QueryInfosArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<InfoOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<InfoWhereInput>;\n};\n\n\nexport type QueryInfosConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<InfoOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<InfoWhereInput>;\n};\n\n\nexport type QueryInstallationArgs = {\n  locales?: Array<Locale>;\n  stage?: Stage;\n  where: InstallationWhereUniqueInput;\n};\n\n\nexport type QueryInstallationVersionArgs = {\n  where: VersionWhereInput;\n};\n\n\nexport type QueryInstallationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<InstallationOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<InstallationWhereInput>;\n};\n\n\nexport type QueryInstallationsConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<InstallationOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<InstallationWhereInput>;\n};\n\n\nexport type QueryNodeArgs = {\n  id: Scalars['ID'];\n  locales?: Array<Locale>;\n  stage?: Stage;\n};\n\n\nexport type QuerySocialArgs = {\n  locales?: Array<Locale>;\n  stage?: Stage;\n  where: SocialWhereUniqueInput;\n};\n\n\nexport type QuerySocialVersionArgs = {\n  where: VersionWhereInput;\n};\n\n\nexport type QuerySocialsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<SocialOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<SocialWhereInput>;\n};\n\n\nexport type QuerySocialsConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<SocialOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<SocialWhereInput>;\n};\n\n\nexport type QueryUserArgs = {\n  locales?: Array<Locale>;\n  stage?: Stage;\n  where: UserWhereUniqueInput;\n};\n\n\nexport type QueryUsersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<UserOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<UserWhereInput>;\n};\n\n\nexport type QueryUsersConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<UserOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<UserWhereInput>;\n};\n\n\nexport type QueryVideoArgs = {\n  locales?: Array<Locale>;\n  stage?: Stage;\n  where: VideoWhereUniqueInput;\n};\n\n\nexport type QueryVideoVersionArgs = {\n  where: VersionWhereInput;\n};\n\n\nexport type QueryVideosArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<VideoOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<VideoWhereInput>;\n};\n\n\nexport type QueryVideosConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  locales?: Array<Locale>;\n  orderBy?: Maybe<VideoOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  stage?: Stage;\n  where?: Maybe<VideoWhereInput>;\n};\n\n/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */\nexport type Rgba = {\n  __typename?: 'RGBA';\n  a: Scalars['RGBATransparency'];\n  b: Scalars['RGBAHue'];\n  g: Scalars['RGBAHue'];\n  r: Scalars['RGBAHue'];\n};\n\n/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */\nexport type RgbaInput = {\n  a: Scalars['RGBATransparency'];\n  b: Scalars['RGBAHue'];\n  g: Scalars['RGBAHue'];\n  r: Scalars['RGBAHue'];\n};\n\n/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */\nexport type RichText = {\n  __typename?: 'RichText';\n  /** Returns HTMl representation */\n  html: Scalars['String'];\n  /** Returns Markdown representation */\n  markdown: Scalars['String'];\n  /** Returns AST representation */\n  raw: Scalars['RichTextAST'];\n  /** Returns plain-text contents of RichText */\n  text: Scalars['String'];\n};\n\nexport type Social = Node & {\n  __typename?: 'Social';\n  /** The time the document was created */\n  createdAt: Scalars['DateTime'];\n  /** User that created this document */\n  createdBy?: Maybe<User>;\n  /** Get the document in other stages */\n  documentInStages: Array<Social>;\n  /** List of Social versions */\n  history: Array<Version>;\n  icon?: Maybe<Asset>;\n  /** The unique identifier */\n  id: Scalars['ID'];\n  link?: Maybe<Scalars['String']>;\n  /** The time the document was published. Null on documents in draft stage. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** User that last published this document */\n  publishedBy?: Maybe<User>;\n  /** System stage field */\n  stage: Stage;\n  title?: Maybe<Scalars['String']>;\n  /** The time the document was updated */\n  updatedAt: Scalars['DateTime'];\n  /** User that last updated this document */\n  updatedBy?: Maybe<User>;\n};\n\n\nexport type SocialCreatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type SocialDocumentInStagesArgs = {\n  includeCurrent?: Scalars['Boolean'];\n  inheritLocale?: Scalars['Boolean'];\n  stages?: Array<Stage>;\n};\n\n\nexport type SocialHistoryArgs = {\n  limit?: Scalars['Int'];\n  skip?: Scalars['Int'];\n  stageOverride?: Maybe<Stage>;\n};\n\n\nexport type SocialIconArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type SocialPublishedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type SocialUpdatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\nexport type SocialConnectInput = {\n  /** Allow to specify document position in list of connected documents, will default to appending at end of list */\n  position?: Maybe<ConnectPositionInput>;\n  /** Document to connect */\n  where: SocialWhereUniqueInput;\n};\n\n/** A connection to a list of items. */\nexport type SocialConnection = {\n  __typename?: 'SocialConnection';\n  aggregate: Aggregate;\n  /** A list of edges. */\n  edges: Array<SocialEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\nexport type SocialCreateInput = {\n  createdAt?: Maybe<Scalars['DateTime']>;\n  icon?: Maybe<AssetCreateOneInlineInput>;\n  link?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type SocialCreateManyInlineInput = {\n  /** Connect multiple existing Social documents */\n  connect?: Maybe<Array<SocialWhereUniqueInput>>;\n  /** Create and connect multiple existing Social documents */\n  create?: Maybe<Array<SocialCreateInput>>;\n};\n\nexport type SocialCreateOneInlineInput = {\n  /** Connect one existing Social document */\n  connect?: Maybe<SocialWhereUniqueInput>;\n  /** Create and connect one Social document */\n  create?: Maybe<SocialCreateInput>;\n};\n\n/** An edge in a connection. */\nexport type SocialEdge = {\n  __typename?: 'SocialEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Social;\n};\n\n/** Identifies documents */\nexport type SocialManyWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<SocialWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<SocialWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<SocialWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  icon?: Maybe<AssetWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  link?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  link_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  link_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  link_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  link_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  link_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  link_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  link_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  link_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  link_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  title?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  title_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  title_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  title_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  title_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  title_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  title_starts_with?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n};\n\nexport enum SocialOrderByInput {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  LinkAsc = 'link_ASC',\n  LinkDesc = 'link_DESC',\n  PublishedAtAsc = 'publishedAt_ASC',\n  PublishedAtDesc = 'publishedAt_DESC',\n  TitleAsc = 'title_ASC',\n  TitleDesc = 'title_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type SocialUpdateInput = {\n  icon?: Maybe<AssetUpdateOneInlineInput>;\n  link?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type SocialUpdateManyInlineInput = {\n  /** Connect multiple existing Social documents */\n  connect?: Maybe<Array<SocialConnectInput>>;\n  /** Create and connect multiple Social documents */\n  create?: Maybe<Array<SocialCreateInput>>;\n  /** Delete multiple Social documents */\n  delete?: Maybe<Array<SocialWhereUniqueInput>>;\n  /** Disconnect multiple Social documents */\n  disconnect?: Maybe<Array<SocialWhereUniqueInput>>;\n  /** Override currently-connected documents with multiple existing Social documents */\n  set?: Maybe<Array<SocialWhereUniqueInput>>;\n  /** Update multiple Social documents */\n  update?: Maybe<Array<SocialUpdateWithNestedWhereUniqueInput>>;\n  /** Upsert multiple Social documents */\n  upsert?: Maybe<Array<SocialUpsertWithNestedWhereUniqueInput>>;\n};\n\nexport type SocialUpdateManyInput = {\n  link?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type SocialUpdateManyWithNestedWhereInput = {\n  /** Update many input */\n  data: SocialUpdateManyInput;\n  /** Document search */\n  where: SocialWhereInput;\n};\n\nexport type SocialUpdateOneInlineInput = {\n  /** Connect existing Social document */\n  connect?: Maybe<SocialWhereUniqueInput>;\n  /** Create and connect one Social document */\n  create?: Maybe<SocialCreateInput>;\n  /** Delete currently connected Social document */\n  delete?: Maybe<Scalars['Boolean']>;\n  /** Disconnect currently connected Social document */\n  disconnect?: Maybe<Scalars['Boolean']>;\n  /** Update single Social document */\n  update?: Maybe<SocialUpdateWithNestedWhereUniqueInput>;\n  /** Upsert single Social document */\n  upsert?: Maybe<SocialUpsertWithNestedWhereUniqueInput>;\n};\n\nexport type SocialUpdateWithNestedWhereUniqueInput = {\n  /** Document to update */\n  data: SocialUpdateInput;\n  /** Unique document search */\n  where: SocialWhereUniqueInput;\n};\n\nexport type SocialUpsertInput = {\n  /** Create document if it didn't exist */\n  create: SocialCreateInput;\n  /** Update document if it exists */\n  update: SocialUpdateInput;\n};\n\nexport type SocialUpsertWithNestedWhereUniqueInput = {\n  /** Upsert data */\n  data: SocialUpsertInput;\n  /** Unique document search */\n  where: SocialWhereUniqueInput;\n};\n\n/** Identifies documents */\nexport type SocialWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<SocialWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<SocialWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<SocialWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  icon?: Maybe<AssetWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  link?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  link_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  link_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  link_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  link_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  link_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  link_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  link_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  link_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  link_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  title?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  title_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  title_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  title_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  title_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  title_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  title_starts_with?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n};\n\n/** References Social record uniquely */\nexport type SocialWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\n/** Stage system enumeration */\nexport enum Stage {\n  /** The Draft is the default stage for all your content. */\n  Draft = 'DRAFT',\n  /** The Published stage is where you can publish your content to. */\n  Published = 'PUBLISHED'\n}\n\nexport enum SystemDateTimeFieldVariation {\n  Base = 'BASE',\n  Combined = 'COMBINED',\n  Localization = 'LOCALIZATION'\n}\n\nexport type UnpublishLocaleInput = {\n  /** Locales to unpublish */\n  locale: Locale;\n  /** Stages to unpublish selected locales from */\n  stages: Array<Stage>;\n};\n\n/** User system model */\nexport type User = Node & {\n  __typename?: 'User';\n  /** The time the document was created */\n  createdAt: Scalars['DateTime'];\n  /** Get the document in other stages */\n  documentInStages: Array<User>;\n  /** The unique identifier */\n  id: Scalars['ID'];\n  /** Flag to determine if user is active or not */\n  isActive: Scalars['Boolean'];\n  /** User Kind. Can be either MEMBER, PAT or PUBLIC */\n  kind: UserKind;\n  /** The username */\n  name: Scalars['String'];\n  /** Profile Picture url */\n  picture?: Maybe<Scalars['String']>;\n  /** The time the document was published. Null on documents in draft stage. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** System stage field */\n  stage: Stage;\n  /** The time the document was updated */\n  updatedAt: Scalars['DateTime'];\n};\n\n\n/** User system model */\nexport type UserDocumentInStagesArgs = {\n  includeCurrent?: Scalars['Boolean'];\n  inheritLocale?: Scalars['Boolean'];\n  stages?: Array<Stage>;\n};\n\nexport type UserConnectInput = {\n  /** Allow to specify document position in list of connected documents, will default to appending at end of list */\n  position?: Maybe<ConnectPositionInput>;\n  /** Document to connect */\n  where: UserWhereUniqueInput;\n};\n\n/** A connection to a list of items. */\nexport type UserConnection = {\n  __typename?: 'UserConnection';\n  aggregate: Aggregate;\n  /** A list of edges. */\n  edges: Array<UserEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\nexport type UserCreateManyInlineInput = {\n  /** Connect multiple existing User documents */\n  connect?: Maybe<Array<UserWhereUniqueInput>>;\n};\n\nexport type UserCreateOneInlineInput = {\n  /** Connect one existing User document */\n  connect?: Maybe<UserWhereUniqueInput>;\n};\n\n/** An edge in a connection. */\nexport type UserEdge = {\n  __typename?: 'UserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: User;\n};\n\n/** System User Kind */\nexport enum UserKind {\n  Member = 'MEMBER',\n  Pat = 'PAT',\n  Public = 'PUBLIC',\n  Webhook = 'WEBHOOK'\n}\n\n/** Identifies documents */\nexport type UserManyWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<UserWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<UserWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<UserWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  /** All values that are not equal to given value. */\n  isActive_not?: Maybe<Scalars['Boolean']>;\n  kind?: Maybe<UserKind>;\n  /** All values that are contained in given list. */\n  kind_in?: Maybe<Array<UserKind>>;\n  /** All values that are not equal to given value. */\n  kind_not?: Maybe<UserKind>;\n  /** All values that are not contained in given list. */\n  kind_not_in?: Maybe<Array<UserKind>>;\n  name?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  name_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  name_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  name_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  name_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  name_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  name_starts_with?: Maybe<Scalars['String']>;\n  picture?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  picture_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  picture_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  picture_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  picture_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  picture_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  picture_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  picture_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  picture_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  picture_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n};\n\nexport enum UserOrderByInput {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  IsActiveAsc = 'isActive_ASC',\n  IsActiveDesc = 'isActive_DESC',\n  KindAsc = 'kind_ASC',\n  KindDesc = 'kind_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  PictureAsc = 'picture_ASC',\n  PictureDesc = 'picture_DESC',\n  PublishedAtAsc = 'publishedAt_ASC',\n  PublishedAtDesc = 'publishedAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type UserUpdateManyInlineInput = {\n  /** Connect multiple existing User documents */\n  connect?: Maybe<Array<UserConnectInput>>;\n  /** Disconnect multiple User documents */\n  disconnect?: Maybe<Array<UserWhereUniqueInput>>;\n  /** Override currently-connected documents with multiple existing User documents */\n  set?: Maybe<Array<UserWhereUniqueInput>>;\n};\n\nexport type UserUpdateOneInlineInput = {\n  /** Connect existing User document */\n  connect?: Maybe<UserWhereUniqueInput>;\n  /** Disconnect currently connected User document */\n  disconnect?: Maybe<Scalars['Boolean']>;\n};\n\n/** Identifies documents */\nexport type UserWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<UserWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<UserWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<UserWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  /** All values that are not equal to given value. */\n  isActive_not?: Maybe<Scalars['Boolean']>;\n  kind?: Maybe<UserKind>;\n  /** All values that are contained in given list. */\n  kind_in?: Maybe<Array<UserKind>>;\n  /** All values that are not equal to given value. */\n  kind_not?: Maybe<UserKind>;\n  /** All values that are not contained in given list. */\n  kind_not_in?: Maybe<Array<UserKind>>;\n  name?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  name_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  name_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  name_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  name_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  name_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  name_starts_with?: Maybe<Scalars['String']>;\n  picture?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  picture_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  picture_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  picture_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  picture_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  picture_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  picture_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  picture_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  picture_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  picture_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n};\n\n/** References User record uniquely */\nexport type UserWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type Version = {\n  __typename?: 'Version';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  revision: Scalars['Int'];\n  stage: Stage;\n};\n\nexport type VersionWhereInput = {\n  id: Scalars['ID'];\n  revision: Scalars['Int'];\n  stage: Stage;\n};\n\nexport type Video = Node & {\n  __typename?: 'Video';\n  /** The time the document was created */\n  createdAt: Scalars['DateTime'];\n  /** User that created this document */\n  createdBy?: Maybe<User>;\n  /** Get the document in other stages */\n  documentInStages: Array<Video>;\n  /** List of Video versions */\n  history: Array<Version>;\n  /** The unique identifier */\n  id: Scalars['ID'];\n  location?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  /** The time the document was published. Null on documents in draft stage. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** User that last published this document */\n  publishedBy?: Maybe<User>;\n  /** System stage field */\n  stage: Stage;\n  title?: Maybe<Scalars['String']>;\n  /** The time the document was updated */\n  updatedAt: Scalars['DateTime'];\n  /** User that last updated this document */\n  updatedBy?: Maybe<User>;\n  url?: Maybe<Scalars['String']>;\n  year?: Maybe<Scalars['Date']>;\n};\n\n\nexport type VideoCreatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type VideoDocumentInStagesArgs = {\n  includeCurrent?: Scalars['Boolean'];\n  inheritLocale?: Scalars['Boolean'];\n  stages?: Array<Stage>;\n};\n\n\nexport type VideoHistoryArgs = {\n  limit?: Scalars['Int'];\n  skip?: Scalars['Int'];\n  stageOverride?: Maybe<Stage>;\n};\n\n\nexport type VideoPublishedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\n\nexport type VideoUpdatedByArgs = {\n  locales?: Maybe<Array<Locale>>;\n};\n\nexport type VideoConnectInput = {\n  /** Allow to specify document position in list of connected documents, will default to appending at end of list */\n  position?: Maybe<ConnectPositionInput>;\n  /** Document to connect */\n  where: VideoWhereUniqueInput;\n};\n\n/** A connection to a list of items. */\nexport type VideoConnection = {\n  __typename?: 'VideoConnection';\n  aggregate: Aggregate;\n  /** A list of edges. */\n  edges: Array<VideoEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\nexport type VideoCreateInput = {\n  createdAt?: Maybe<Scalars['DateTime']>;\n  location?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  url?: Maybe<Scalars['String']>;\n  year?: Maybe<Scalars['Date']>;\n};\n\nexport type VideoCreateManyInlineInput = {\n  /** Connect multiple existing Video documents */\n  connect?: Maybe<Array<VideoWhereUniqueInput>>;\n  /** Create and connect multiple existing Video documents */\n  create?: Maybe<Array<VideoCreateInput>>;\n};\n\nexport type VideoCreateOneInlineInput = {\n  /** Connect one existing Video document */\n  connect?: Maybe<VideoWhereUniqueInput>;\n  /** Create and connect one Video document */\n  create?: Maybe<VideoCreateInput>;\n};\n\n/** An edge in a connection. */\nexport type VideoEdge = {\n  __typename?: 'VideoEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Video;\n};\n\n/** Identifies documents */\nexport type VideoManyWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<VideoWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<VideoWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<VideoWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  location?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  location_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  location_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  location_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  location_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  location_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  location_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  location_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  location_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  location_starts_with?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  materials_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  materials_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  materials_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  materials_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  materials_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  materials_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  materials_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  materials_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  materials_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  title?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  title_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  title_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  title_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  title_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  title_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  title_starts_with?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n  url?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  url_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  url_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  url_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  url_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  url_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  url_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  url_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  url_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  url_starts_with?: Maybe<Scalars['String']>;\n  year?: Maybe<Scalars['Date']>;\n  /** All values greater than the given value. */\n  year_gt?: Maybe<Scalars['Date']>;\n  /** All values greater than or equal the given value. */\n  year_gte?: Maybe<Scalars['Date']>;\n  /** All values that are contained in given list. */\n  year_in?: Maybe<Array<Scalars['Date']>>;\n  /** All values less than the given value. */\n  year_lt?: Maybe<Scalars['Date']>;\n  /** All values less than or equal the given value. */\n  year_lte?: Maybe<Scalars['Date']>;\n  /** All values that are not equal to given value. */\n  year_not?: Maybe<Scalars['Date']>;\n  /** All values that are not contained in given list. */\n  year_not_in?: Maybe<Array<Scalars['Date']>>;\n};\n\nexport enum VideoOrderByInput {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  LocationAsc = 'location_ASC',\n  LocationDesc = 'location_DESC',\n  MaterialsAsc = 'materials_ASC',\n  MaterialsDesc = 'materials_DESC',\n  PublishedAtAsc = 'publishedAt_ASC',\n  PublishedAtDesc = 'publishedAt_DESC',\n  TitleAsc = 'title_ASC',\n  TitleDesc = 'title_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC',\n  UrlAsc = 'url_ASC',\n  UrlDesc = 'url_DESC',\n  YearAsc = 'year_ASC',\n  YearDesc = 'year_DESC'\n}\n\nexport type VideoUpdateInput = {\n  location?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  year?: Maybe<Scalars['Date']>;\n};\n\nexport type VideoUpdateManyInlineInput = {\n  /** Connect multiple existing Video documents */\n  connect?: Maybe<Array<VideoConnectInput>>;\n  /** Create and connect multiple Video documents */\n  create?: Maybe<Array<VideoCreateInput>>;\n  /** Delete multiple Video documents */\n  delete?: Maybe<Array<VideoWhereUniqueInput>>;\n  /** Disconnect multiple Video documents */\n  disconnect?: Maybe<Array<VideoWhereUniqueInput>>;\n  /** Override currently-connected documents with multiple existing Video documents */\n  set?: Maybe<Array<VideoWhereUniqueInput>>;\n  /** Update multiple Video documents */\n  update?: Maybe<Array<VideoUpdateWithNestedWhereUniqueInput>>;\n  /** Upsert multiple Video documents */\n  upsert?: Maybe<Array<VideoUpsertWithNestedWhereUniqueInput>>;\n};\n\nexport type VideoUpdateManyInput = {\n  location?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  year?: Maybe<Scalars['Date']>;\n};\n\nexport type VideoUpdateManyWithNestedWhereInput = {\n  /** Update many input */\n  data: VideoUpdateManyInput;\n  /** Document search */\n  where: VideoWhereInput;\n};\n\nexport type VideoUpdateOneInlineInput = {\n  /** Connect existing Video document */\n  connect?: Maybe<VideoWhereUniqueInput>;\n  /** Create and connect one Video document */\n  create?: Maybe<VideoCreateInput>;\n  /** Delete currently connected Video document */\n  delete?: Maybe<Scalars['Boolean']>;\n  /** Disconnect currently connected Video document */\n  disconnect?: Maybe<Scalars['Boolean']>;\n  /** Update single Video document */\n  update?: Maybe<VideoUpdateWithNestedWhereUniqueInput>;\n  /** Upsert single Video document */\n  upsert?: Maybe<VideoUpsertWithNestedWhereUniqueInput>;\n};\n\nexport type VideoUpdateWithNestedWhereUniqueInput = {\n  /** Document to update */\n  data: VideoUpdateInput;\n  /** Unique document search */\n  where: VideoWhereUniqueInput;\n};\n\nexport type VideoUpsertInput = {\n  /** Create document if it didn't exist */\n  create: VideoCreateInput;\n  /** Update document if it exists */\n  update: VideoUpdateInput;\n};\n\nexport type VideoUpsertWithNestedWhereUniqueInput = {\n  /** Upsert data */\n  data: VideoUpsertInput;\n  /** Unique document search */\n  where: VideoWhereUniqueInput;\n};\n\n/** Identifies documents */\nexport type VideoWhereInput = {\n  /** Logical AND on all given filters. */\n  AND?: Maybe<Array<VideoWhereInput>>;\n  /** Logical NOT on all given filters combined by AND. */\n  NOT?: Maybe<Array<VideoWhereInput>>;\n  /** Logical OR on all given filters. */\n  OR?: Maybe<Array<VideoWhereInput>>;\n  /** Contains search across all appropriate fields. */\n  _search?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdBy?: Maybe<UserWhereInput>;\n  id?: Maybe<Scalars['ID']>;\n  /** All values containing the given string. */\n  id_contains?: Maybe<Scalars['ID']>;\n  /** All values ending with the given string. */\n  id_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are contained in given list. */\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values that are not equal to given value. */\n  id_not?: Maybe<Scalars['ID']>;\n  /** All values not containing the given string. */\n  id_not_contains?: Maybe<Scalars['ID']>;\n  /** All values not ending with the given string */\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  /** All values that are not contained in given list. */\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  /** All values not starting with the given string. */\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  /** All values starting with the given string. */\n  id_starts_with?: Maybe<Scalars['ID']>;\n  location?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  location_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  location_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  location_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  location_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  location_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  location_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  location_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  location_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  location_starts_with?: Maybe<Scalars['String']>;\n  materials?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  materials_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  materials_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  materials_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  materials_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  materials_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  materials_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  materials_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  materials_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  materials_starts_with?: Maybe<Scalars['String']>;\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  publishedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  publishedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  publishedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  publishedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  publishedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  publishedBy?: Maybe<UserWhereInput>;\n  title?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  title_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  title_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  title_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  title_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  title_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  title_starts_with?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than the given value. */\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  /** All values greater than or equal the given value. */\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  /** All values that are contained in given list. */\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  /** All values less than the given value. */\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  /** All values less than or equal the given value. */\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  /** All values that are not equal to given value. */\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  /** All values that are not contained in given list. */\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedBy?: Maybe<UserWhereInput>;\n  url?: Maybe<Scalars['String']>;\n  /** All values containing the given string. */\n  url_contains?: Maybe<Scalars['String']>;\n  /** All values ending with the given string. */\n  url_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are contained in given list. */\n  url_in?: Maybe<Array<Scalars['String']>>;\n  /** All values that are not equal to given value. */\n  url_not?: Maybe<Scalars['String']>;\n  /** All values not containing the given string. */\n  url_not_contains?: Maybe<Scalars['String']>;\n  /** All values not ending with the given string */\n  url_not_ends_with?: Maybe<Scalars['String']>;\n  /** All values that are not contained in given list. */\n  url_not_in?: Maybe<Array<Scalars['String']>>;\n  /** All values not starting with the given string. */\n  url_not_starts_with?: Maybe<Scalars['String']>;\n  /** All values starting with the given string. */\n  url_starts_with?: Maybe<Scalars['String']>;\n  year?: Maybe<Scalars['Date']>;\n  /** All values greater than the given value. */\n  year_gt?: Maybe<Scalars['Date']>;\n  /** All values greater than or equal the given value. */\n  year_gte?: Maybe<Scalars['Date']>;\n  /** All values that are contained in given list. */\n  year_in?: Maybe<Array<Scalars['Date']>>;\n  /** All values less than the given value. */\n  year_lt?: Maybe<Scalars['Date']>;\n  /** All values less than or equal the given value. */\n  year_lte?: Maybe<Scalars['Date']>;\n  /** All values that are not equal to given value. */\n  year_not?: Maybe<Scalars['Date']>;\n  /** All values that are not contained in given list. */\n  year_not_in?: Maybe<Array<Scalars['Date']>>;\n};\n\n/** References Video record uniquely */\nexport type VideoWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport enum _FilterKind {\n  And = 'AND',\n  Not = 'NOT',\n  Or = 'OR',\n  Contains = 'contains',\n  ContainsAll = 'contains_all',\n  ContainsNone = 'contains_none',\n  ContainsSome = 'contains_some',\n  EndsWith = 'ends_with',\n  Eq = 'eq',\n  EqNot = 'eq_not',\n  Gt = 'gt',\n  Gte = 'gte',\n  In = 'in',\n  Lt = 'lt',\n  Lte = 'lte',\n  NotContains = 'not_contains',\n  NotEndsWith = 'not_ends_with',\n  NotIn = 'not_in',\n  NotStartsWith = 'not_starts_with',\n  RelationalEvery = 'relational_every',\n  RelationalNone = 'relational_none',\n  RelationalSingle = 'relational_single',\n  RelationalSome = 'relational_some',\n  Search = 'search',\n  StartsWith = 'starts_with'\n}\n\nexport enum _MutationInputFieldKind {\n  Enum = 'enum',\n  Relation = 'relation',\n  RichText = 'richText',\n  RichTextWithEmbeds = 'richTextWithEmbeds',\n  Scalar = 'scalar',\n  Union = 'union',\n  Virtual = 'virtual'\n}\n\nexport enum _MutationKind {\n  Create = 'create',\n  Delete = 'delete',\n  DeleteMany = 'deleteMany',\n  Publish = 'publish',\n  PublishMany = 'publishMany',\n  Unpublish = 'unpublish',\n  UnpublishMany = 'unpublishMany',\n  Update = 'update',\n  UpdateMany = 'updateMany',\n  Upsert = 'upsert'\n}\n\nexport enum _OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport enum _RelationInputCardinality {\n  Many = 'many',\n  One = 'one'\n}\n\nexport enum _RelationInputKind {\n  Create = 'create',\n  Update = 'update'\n}\n\nexport enum _RelationKind {\n  Regular = 'regular',\n  Union = 'union'\n}\n\nexport enum _SystemDateTimeFieldVariation {\n  Base = 'base',\n  Combined = 'combined',\n  Localization = 'localization'\n}\n\nexport type ExhibitionsQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ExhibitionsQuery = { __typename?: 'Query', exhibition?: Maybe<{ __typename?: 'Exhibition', title?: Maybe<string>, startDate?: Maybe<any>, endDate?: Maybe<any>, type?: Maybe<ExhibitionType>, galleryName?: Maybe<string>, location?: Maybe<string>, photographerCredit?: Maybe<string>, images: Array<{ __typename?: 'Asset', id: string, url: string }>, about?: Maybe<{ __typename?: 'Asset', url: string }> }> };\n\nexport type ExhibitionListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ExhibitionListQuery = { __typename?: 'Query', exhibitions: Array<{ __typename?: 'Exhibition', id: string }> };\n\nexport type InfoListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type InfoListQuery = { __typename?: 'Query', infos: Array<{ __typename?: 'Info', id: string, cv?: Maybe<{ __typename?: 'Asset', id: string, url: string }>, news?: Maybe<{ __typename?: 'RichText', html: string }>, imprint?: Maybe<{ __typename?: 'RichText', html: string }> }> };\n\nexport type InstallationsQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type InstallationsQuery = { __typename?: 'Query', installation?: Maybe<{ __typename?: 'Installation', title?: Maybe<string>, materials?: Maybe<string>, location?: Maybe<string>, year?: Maybe<any>, photographerCredit?: Maybe<string>, images: Array<{ __typename?: 'Asset', id: string, url: string }> }> };\n\nexport type InstallationsListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type InstallationsListQuery = { __typename?: 'Query', installations: Array<{ __typename?: 'Installation', id: string }> };\n\nexport type SidebarQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type SidebarQuery = { __typename?: 'Query', exhibitions: Array<{ __typename?: 'Exhibition', id: string, title?: Maybe<string> }>, installations: Array<{ __typename?: 'Installation', id: string, title?: Maybe<string> }>, videos: Array<{ __typename?: 'Video', id: string, title?: Maybe<string> }>, infos: Array<{ __typename?: 'Info', id: string, cv?: Maybe<{ __typename?: 'Asset', id: string }>, news?: Maybe<{ __typename: 'RichText' }>, imprint?: Maybe<{ __typename: 'RichText' }> }> };\n\nexport type VideosQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type VideosQuery = { __typename?: 'Query', video?: Maybe<{ __typename?: 'Video', title?: Maybe<string>, materials?: Maybe<string>, location?: Maybe<string>, year?: Maybe<any>, url?: Maybe<string> }> };\n\nexport type VideoListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type VideoListQuery = { __typename?: 'Query', videos: Array<{ __typename?: 'Video', id: string }> };\n\n\nexport const ExhibitionsDocument = gql`\n    query Exhibitions($id: ID!) {\n  exhibition(where: {id: $id}) {\n    title\n    startDate\n    endDate\n    type\n    galleryName\n    location\n    images {\n      id\n      url\n    }\n    about {\n      url\n    }\n    photographerCredit\n  }\n}\n    `;\n\n/**\n * __useExhibitionsQuery__\n *\n * To run a query within a React component, call `useExhibitionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useExhibitionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExhibitionsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useExhibitionsQuery(baseOptions: Apollo.QueryHookOptions<ExhibitionsQuery, ExhibitionsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ExhibitionsQuery, ExhibitionsQueryVariables>(ExhibitionsDocument, options);\n      }\nexport function useExhibitionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ExhibitionsQuery, ExhibitionsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ExhibitionsQuery, ExhibitionsQueryVariables>(ExhibitionsDocument, options);\n        }\nexport type ExhibitionsQueryHookResult = ReturnType<typeof useExhibitionsQuery>;\nexport type ExhibitionsLazyQueryHookResult = ReturnType<typeof useExhibitionsLazyQuery>;\nexport type ExhibitionsQueryResult = Apollo.QueryResult<ExhibitionsQuery, ExhibitionsQueryVariables>;\nexport const ExhibitionListDocument = gql`\n    query ExhibitionList {\n  exhibitions: exhibitions(orderBy: startDate_DESC) {\n    id\n  }\n}\n    `;\n\n/**\n * __useExhibitionListQuery__\n *\n * To run a query within a React component, call `useExhibitionListQuery` and pass it any options that fit your needs.\n * When your component renders, `useExhibitionListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExhibitionListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useExhibitionListQuery(baseOptions?: Apollo.QueryHookOptions<ExhibitionListQuery, ExhibitionListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ExhibitionListQuery, ExhibitionListQueryVariables>(ExhibitionListDocument, options);\n      }\nexport function useExhibitionListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ExhibitionListQuery, ExhibitionListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ExhibitionListQuery, ExhibitionListQueryVariables>(ExhibitionListDocument, options);\n        }\nexport type ExhibitionListQueryHookResult = ReturnType<typeof useExhibitionListQuery>;\nexport type ExhibitionListLazyQueryHookResult = ReturnType<typeof useExhibitionListLazyQuery>;\nexport type ExhibitionListQueryResult = Apollo.QueryResult<ExhibitionListQuery, ExhibitionListQueryVariables>;\nexport const InfoListDocument = gql`\n    query InfoList {\n  infos {\n    id\n    cv {\n      id\n      url\n    }\n    news {\n      html\n    }\n    imprint {\n      html\n    }\n  }\n}\n    `;\n\n/**\n * __useInfoListQuery__\n *\n * To run a query within a React component, call `useInfoListQuery` and pass it any options that fit your needs.\n * When your component renders, `useInfoListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useInfoListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useInfoListQuery(baseOptions?: Apollo.QueryHookOptions<InfoListQuery, InfoListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<InfoListQuery, InfoListQueryVariables>(InfoListDocument, options);\n      }\nexport function useInfoListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InfoListQuery, InfoListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<InfoListQuery, InfoListQueryVariables>(InfoListDocument, options);\n        }\nexport type InfoListQueryHookResult = ReturnType<typeof useInfoListQuery>;\nexport type InfoListLazyQueryHookResult = ReturnType<typeof useInfoListLazyQuery>;\nexport type InfoListQueryResult = Apollo.QueryResult<InfoListQuery, InfoListQueryVariables>;\nexport const InstallationsDocument = gql`\n    query Installations($id: ID!) {\n  installation(where: {id: $id}) {\n    title\n    materials\n    location\n    year\n    images {\n      id\n      url\n    }\n    photographerCredit\n  }\n}\n    `;\n\n/**\n * __useInstallationsQuery__\n *\n * To run a query within a React component, call `useInstallationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useInstallationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useInstallationsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useInstallationsQuery(baseOptions: Apollo.QueryHookOptions<InstallationsQuery, InstallationsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<InstallationsQuery, InstallationsQueryVariables>(InstallationsDocument, options);\n      }\nexport function useInstallationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InstallationsQuery, InstallationsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<InstallationsQuery, InstallationsQueryVariables>(InstallationsDocument, options);\n        }\nexport type InstallationsQueryHookResult = ReturnType<typeof useInstallationsQuery>;\nexport type InstallationsLazyQueryHookResult = ReturnType<typeof useInstallationsLazyQuery>;\nexport type InstallationsQueryResult = Apollo.QueryResult<InstallationsQuery, InstallationsQueryVariables>;\nexport const InstallationsListDocument = gql`\n    query InstallationsList {\n  installations(orderBy: year_DESC) {\n    id\n  }\n}\n    `;\n\n/**\n * __useInstallationsListQuery__\n *\n * To run a query within a React component, call `useInstallationsListQuery` and pass it any options that fit your needs.\n * When your component renders, `useInstallationsListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useInstallationsListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useInstallationsListQuery(baseOptions?: Apollo.QueryHookOptions<InstallationsListQuery, InstallationsListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<InstallationsListQuery, InstallationsListQueryVariables>(InstallationsListDocument, options);\n      }\nexport function useInstallationsListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InstallationsListQuery, InstallationsListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<InstallationsListQuery, InstallationsListQueryVariables>(InstallationsListDocument, options);\n        }\nexport type InstallationsListQueryHookResult = ReturnType<typeof useInstallationsListQuery>;\nexport type InstallationsListLazyQueryHookResult = ReturnType<typeof useInstallationsListLazyQuery>;\nexport type InstallationsListQueryResult = Apollo.QueryResult<InstallationsListQuery, InstallationsListQueryVariables>;\nexport const SidebarDocument = gql`\n    query Sidebar {\n  exhibitions(orderBy: startDate_DESC) {\n    id\n    title\n  }\n  installations(orderBy: year_DESC) {\n    id\n    title\n  }\n  videos {\n    id\n    title\n  }\n  infos {\n    id\n    cv {\n      id\n    }\n    news {\n      __typename\n    }\n    imprint {\n      __typename\n    }\n  }\n}\n    `;\n\n/**\n * __useSidebarQuery__\n *\n * To run a query within a React component, call `useSidebarQuery` and pass it any options that fit your needs.\n * When your component renders, `useSidebarQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSidebarQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSidebarQuery(baseOptions?: Apollo.QueryHookOptions<SidebarQuery, SidebarQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SidebarQuery, SidebarQueryVariables>(SidebarDocument, options);\n      }\nexport function useSidebarLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SidebarQuery, SidebarQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SidebarQuery, SidebarQueryVariables>(SidebarDocument, options);\n        }\nexport type SidebarQueryHookResult = ReturnType<typeof useSidebarQuery>;\nexport type SidebarLazyQueryHookResult = ReturnType<typeof useSidebarLazyQuery>;\nexport type SidebarQueryResult = Apollo.QueryResult<SidebarQuery, SidebarQueryVariables>;\nexport const VideosDocument = gql`\n    query Videos($id: ID!) {\n  video(where: {id: $id}) {\n    title\n    materials\n    location\n    year\n    url\n  }\n}\n    `;\n\n/**\n * __useVideosQuery__\n *\n * To run a query within a React component, call `useVideosQuery` and pass it any options that fit your needs.\n * When your component renders, `useVideosQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useVideosQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useVideosQuery(baseOptions: Apollo.QueryHookOptions<VideosQuery, VideosQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<VideosQuery, VideosQueryVariables>(VideosDocument, options);\n      }\nexport function useVideosLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<VideosQuery, VideosQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<VideosQuery, VideosQueryVariables>(VideosDocument, options);\n        }\nexport type VideosQueryHookResult = ReturnType<typeof useVideosQuery>;\nexport type VideosLazyQueryHookResult = ReturnType<typeof useVideosLazyQuery>;\nexport type VideosQueryResult = Apollo.QueryResult<VideosQuery, VideosQueryVariables>;\nexport const VideoListDocument = gql`\n    query VideoList {\n  videos {\n    id\n  }\n}\n    `;\n\n/**\n * __useVideoListQuery__\n *\n * To run a query within a React component, call `useVideoListQuery` and pass it any options that fit your needs.\n * When your component renders, `useVideoListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useVideoListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useVideoListQuery(baseOptions?: Apollo.QueryHookOptions<VideoListQuery, VideoListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<VideoListQuery, VideoListQueryVariables>(VideoListDocument, options);\n      }\nexport function useVideoListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<VideoListQuery, VideoListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<VideoListQuery, VideoListQueryVariables>(VideoListDocument, options);\n        }\nexport type VideoListQueryHookResult = ReturnType<typeof useVideoListQuery>;\nexport type VideoListLazyQueryHookResult = ReturnType<typeof useVideoListLazyQuery>;\nexport type VideoListQueryResult = Apollo.QueryResult<VideoListQuery, VideoListQueryVariables>;","import styled from \"styled-components\";\n\nexport const MainContainer = styled.div`\n  background-image: url(\"./bodybackground.jpg\");\n  height: 100%;\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-gap: 30px;\n  text-align: center;\n  position: relative;\n  padding: 0 30px;\n\n  @media screen and (max-width: 1024px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n\n  @media screen and (max-width: 411px) {\n    padding: 0 20px;\n  }\n`;\n\nexport const SectionContainer = styled.div`\n  grid-column-start: 4;\n  grid-column-end: 12;\n  display: flex;\n  flex-direction: column;\n\n  @media screen and (max-width: 1024px) {\n    grid-column-start: 1;\n    grid-column-end: 5;\n    padding-top: 30px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  font-size: 56px;\n  font-weight: 200;\n  display: flex;\n  margin-top: 20px;\n  color: white;\n  text-align: left;\n  margin-left: -30px;\n  margin-bottom: 20px;\n\n  @media screen and (max-width: 1024px) {\n    font-size: 35px;\n    margin: 0;\n    padding: 10px 0;\n  }\n`;\n\nexport const SectionItem = styled.div`\n  background: white;\n  height: 'fit-content';\n  overflow: hidden;\n  padding: 20px 30px 0;\n  display: flex;\n  flex-direction: column;\n  margin-left: -30px;\n  margin-bottom: 60px;\n\n  @media screen and (max-width: 1300px) {\n    margin-right: -30px;\n  }\n\n  @media screen and (max-width: 1024px) {\n    margin-left: 0;\n    margin-right: 0;\n  }\n\n  @media screen and (max-width: 768px) {\n    padding: 15px 15px 0;\n  }\n`;\n\nexport const SectionItemTitle = styled.div`\n  font-size: 24px;\n  display: flex;\n  color: silver;\n`;\n\nexport const SectionItemSubtitle = styled.div`\n  font-size: 14px;\n  line-height: 16px;\n  color: darkgrey;\n  font-weight: 400;\n  text-align: left;\n  margin: 12px 0;\n`;\n\nexport const GalleryItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 80px;\n\n  @media screen and (max-width: 1024px) {\n    margin-bottom: 50px;\n  }\n\n  @media screen and (max-width: 768px) {\n    margin-bottom: 30px;\n  }\n`;\n\nexport const ImageCaption = styled.div`\n  font-size: 14px;\n  line-height: 16px;\n  color: darkgrey;\n  font-weight: 400;\n  grid-column-start: 1;\n  grid-column-end: 9;\n  margin-bottom: 5px;\n\n  @media screen and (max-width: 1024px) {\n    grid-column-end: 5;\n  }\n`;\n\nexport const ImageCredit = styled.div`\n  font-size: 14px;\n  line-height: 16px;\n  color: darkgrey;\n  font-weight: 400;\n  grid-column-start: 1;\n  grid-column-end: 9;\n  margin-top: 5px;\n\n  @media screen and (max-width: 1024px) {\n    grid-column-end: 5;\n  }\n`;\n\nconst sharedGalleryContainerStyles = `\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const GalleryImageContainer = styled.div`\n  ${sharedGalleryContainerStyles};\n  img {\n    width: 100%;\n    object-fit: scale-down;\n    max-height: 700px;\n  }\n`;\n\nexport const GalleryVideoContainer = styled.div`\n  ${sharedGalleryContainerStyles};\n  iframe {\n    margin: 0 auto;\n    display: block;\n  }\n`;\n\nexport const ListItemButton = styled.div<{ isActive?: boolean }>`\n  font-size: 16px;\n  line-height: 24px;\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-weight: ${({ isActive }) => isActive ? '700' : '200'};\n  color: ${({ isActive }) => isActive ? '#563d7c' : 'grey'};\n  border-left:  ${({ isActive }) => isActive ? '2px solid #563d7c' : 'none'};\n  margin-left:  ${({ isActive }) => isActive ? '0' : '2px'};\n`;\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { GalleryItem, GalleryImageContainer, GalleryVideoContainer, SectionItem, SectionItemTitle, SectionItemSubtitle, ImageCredit } from \"../../styles\";\nimport { ISection } from \"./interfaces\";\n\nconst Section: React.FC<ISection> = ({ id, title, caption, images, aboutImage, videoUrl, credit }) => {\n  const [videoWidth, setVideoWidth] = useState<number>(0);\n  const [videoHeight, setVideoHeight] = useState<number>(0);\n  const videoRef = useRef<null | HTMLElement>(null);\n\n  const aspectRatio = 9 / 16;\n\n  useEffect(() => {\n    const setVideoDimensions = () => {\n      const videoElem = document.getElementById(`gallery-video-container-${videoUrl}`);\n      videoRef.current = videoElem;\n\n      if (videoRef.current) {\n        const { clientWidth } = videoRef.current;\n        setVideoWidth(clientWidth);\n        setVideoHeight(clientWidth * aspectRatio);\n      }\n    }\n\n    if (videoUrl) {\n      setVideoDimensions();\n      window.addEventListener('resize', setVideoDimensions);\n      return () => window.removeEventListener('resize', setVideoDimensions)\n    }\n  }, [videoUrl, aspectRatio])\n\n  return (\n    <SectionItem id={id}>\n      <SectionItemTitle>{title}</SectionItemTitle>\n      <SectionItemSubtitle>\n        {caption}\n      </SectionItemSubtitle>\n      {images?.map(({ id, url }) => (\n        <GalleryItem key={id}>\n          <GalleryImageContainer>\n            <img src={url} alt={url} />\n          </GalleryImageContainer>\n          <ImageCredit>\n            {credit}\n          </ImageCredit>\n        </GalleryItem>\n      ))}\n      {aboutImage && (\n        <GalleryItem key={id}>\n          <GalleryImageContainer>\n            <img src={aboutImage.url} alt={aboutImage.url} />\n          </GalleryImageContainer>\n        </GalleryItem>\n      )}\n      {videoUrl && (\n        <GalleryItem>\n          <GalleryVideoContainer id={`gallery-video-container-${videoUrl}`}>\n            <iframe src={videoUrl}\n              title={videoUrl}\n              width={videoWidth}\n              height={videoHeight}\n              frameBorder=\"0\"\n              allowFullScreen\n            />\n          </GalleryVideoContainer>\n        </GalleryItem>\n      )}\n    </SectionItem>\n  );\n};\n\nexport default Section;","import React from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { css } from \"@emotion/react\";\n\nconst LoadingSpinner: React.FC = () => (\n  <ClipLoader color=\"#563d7c\" loading={true} speedMultiplier={0.5} css={css`display: block; margin: 30px auto;`} size={150} />\n);\n\nexport default LoadingSpinner;","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport advancedFormat from \"dayjs/plugin/advancedFormat\";\n\nimport { useExhibitionsQuery } from \"../../generated/graphql\";\nimport GallerySection from \"../GallerySection\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\ndayjs.extend(advancedFormat)\n\nconst Exhibition: React.FC<{ id: string }> = ({ id }) => {\n  const { data, error, loading } = useExhibitionsQuery({\n    variables: {\n      id: id\n    }\n  });\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error || !data || !data.exhibition) {\n    return null;\n  }\n\n  const { title, startDate, endDate, galleryName, location, images, about, photographerCredit } = data.exhibition;\n\n  return (\n    <GallerySection\n      id={id}\n      title={title || \"\"}\n      images={images}\n      aboutImage={about || undefined}\n      caption={`${galleryName}, ${dayjs(startDate).format('MMMM Do YYYY')} - ${dayjs(endDate).format('MMMM Do YYYY')}, ${location}`}\n      credit={photographerCredit}\n    />\n  );\n};\n\nexport default React.memo(Exhibition);\n","import React, { useState, useEffect, useRef, useMemo } from \"react\";\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport debounce from 'lodash.debounce';\n\nimport { useSidebarQuery } from \"../../generated/graphql\";\nimport { StickyContainer, FixedSidebar, Title, Subtitle, Section, ListItem, MobileHeader, MobileDrawerOpen, MobileDrawerClose } from \"./styles\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\nenum SectionEnum {\n  Videos = \"VIDEOS\",\n  Installations = \"INSTALLATIONS\",\n  Exhibitions = \"EXHIBITIONS\",\n  Info = \"INFO\",\n}\n\ntype excludedOptions =\n  | typeof SectionEnum.Info\ntype GallerySectionEnum = Exclude<SectionEnum, excludedOptions>;\n\nconst Sidebar: React.FC = () => {\n  const { data, error, loading } = useSidebarQuery();\n  const [activeSection, setActiveSection] = useState('');\n  const [activeItem, setActiveItem] = useState('');\n  const [drawerExpanded, setDrawerExpanded] = useState(false);\n  const sectionRef = useRef<null | HTMLElement>(null);\n\n  const { exhibitions, installations, videos, infos } = data || {};\n\n  const gallerySectionHash = {\n    [SectionEnum.Exhibitions]: exhibitions,\n    [SectionEnum.Installations]: installations,\n    [SectionEnum.Videos]: videos,\n  }\n\n  const handleScroll = useMemo(() =>\n    debounce(() => {\n      const scrollPosition = window.scrollY + 200;\n      let itemId = null;\n\n      const findElem = (group: { id: string }[]) =>\n        group.find(item => {\n          const elem = document.getElementById(item.id);\n          if (elem) {\n            const { offsetBottom, offsetTop } = getDimensions(elem);\n\n            const isActiveItem = !!(scrollPosition > offsetTop && scrollPosition < offsetBottom);\n\n            if (isActiveItem) itemId = item.id;\n            return isActiveItem;\n          }\n          return null;\n        });\n\n\n      // selects the corresponding category in the sidebar to set as active section\n      if (exhibitions || installations || videos || infos) {\n        const selectedExhibition = exhibitions && findElem(exhibitions);\n        const selectedInstallation = installations && findElem(installations);\n        const selectedVideo = videos && findElem(videos);\n        const selectedInfo = infos && findElem([{ id: infos[0].cv?.id || \"\" }, { id: 'news' }, { id: 'imprint' }]);\n\n        if (selectedExhibition && itemId) {\n          setActiveItem(itemId);\n          setActiveSection(SectionEnum.Exhibitions);\n        }\n\n        if (selectedInstallation && itemId) {\n          setActiveItem(itemId)\n          setActiveSection(SectionEnum.Installations);\n        }\n\n        if (selectedVideo && itemId) {\n          setActiveItem(itemId)\n          setActiveSection(SectionEnum.Videos);\n        }\n\n        if (selectedInfo && itemId) {\n          setActiveItem(itemId)\n          setActiveSection(SectionEnum.Info);\n        }\n\n      }\n    }, 100), [exhibitions, installations, videos, infos]\n  );\n\n\n  useEffect(() => {\n    handleScroll();\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [handleScroll]);\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error || !data) {\n    return null;\n  }\n\n  const getDimensions = (elem: HTMLElement) => {\n    const { offsetTop, offsetHeight } = elem;\n    const offsetBottom = offsetTop + offsetHeight;\n    return { offsetTop, offsetBottom };\n  }\n\n  const scrollTo = (elementId: string) => {\n    const sectionElem = document.getElementById(elementId);\n\n    if (sectionElem !== null) {\n      sectionRef.current = sectionElem;\n      const { offsetTop } = sectionRef.current;\n\n      const scrollToSection = () => window.scrollTo({ top: offsetTop - 120, left: 0, behavior: 'smooth' })\n      scrollToSection();\n    }\n  }\n\n  const selectSection = (sectionId: string) => {\n    setActiveSection(sectionId);\n    scrollTo(sectionId);\n  }\n\n  return (\n    <React.Fragment>\n      <MobileHeader>\n        <MobileDrawerOpen onClick={() => setDrawerExpanded(true)}><GiHamburgerMenu size={20} color=\"white\" /></MobileDrawerOpen>\n      </MobileHeader>\n\n      <StickyContainer isExpanded={drawerExpanded}>\n        <MobileDrawerClose onClick={() => setDrawerExpanded(false)}><IoCloseOutline size={24} /></MobileDrawerClose>\n        <FixedSidebar>\n          <Title>JULIE OPPERMANN</Title>\n          {Object.keys(gallerySectionHash).map((section) => (\n            <Section isExpanded={!!(activeSection === section)} key={`sidebar-section-${section}`}>\n              <Subtitle\n                onClick={() => selectSection(section)}\n                isActive={!!(activeSection === section)}>\n                {section.toLowerCase()}\n              </Subtitle>\n              {gallerySectionHash[(section as GallerySectionEnum)]?.map(({ id, title }) => (\n                <ListItem key={id} onClick={() => scrollTo(id)} isActive={!!(activeItem === id)}>{title?.split(\",\")[0]}</ListItem>\n              ))}\n            </Section>\n          ))}\n          {infos && (\n            <Section isExpanded={!!(activeSection === SectionEnum.Info)} key={`sidebar-section-info`}>\n              <Subtitle\n                onClick={() => selectSection(SectionEnum.Info)}\n                isActive={!!(activeSection === SectionEnum.Info)}>\n                {SectionEnum.Info.toLowerCase()}\n              </Subtitle>\n              <ListItem key='news' onClick={() => scrollTo('news')} isActive={!!(activeItem === 'news')}>News</ListItem>\n              <ListItem key={infos[0].cv?.id} id={`testing-${infos[0].cv?.id}`} onClick={() => scrollTo(infos[0].cv?.id || \"\")} isActive={!!(activeItem === infos[0].cv?.id)}>CV</ListItem>\n              <ListItem key='imprint' onClick={() => scrollTo('imprint')} isActive={!!(activeItem === 'imprint')}>Imprint</ListItem>\n            </Section>\n          )}\n        </FixedSidebar>\n      </StickyContainer>\n    </React.Fragment>\n  );\n};\n\nexport default Sidebar;\n","import styled from \"styled-components\";\nimport { SectionContainer } from \"../../styles\";\n\nexport const SectionContainerStyled = styled(SectionContainer)`\n  @media screen and (max-width: 1024px) {\n    grid-row-start: 1;\n  }\n`;\n\n","import React from \"react\";\n\nimport { useExhibitionListQuery } from \"../../generated/graphql\";\nimport { SectionTitle } from \"../../styles\";\nimport Exhibition from \"../Exhibition\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport { SectionContainerStyled } from \"./styles\";\n\nconst ExhibitionList: React.FC = () => {\n  const { data, error, loading } = useExhibitionListQuery();\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error || !data) {\n    return null;\n  }\n\n  const { exhibitions } = data;\n\n  return (\n    <SectionContainerStyled id=\"exhibitions\">\n      <SectionTitle>EXHIBITION VIEWS</SectionTitle>\n      {exhibitions.map(({ id }) => (\n        <Exhibition id={id} key={id} />\n      ))}\n    </SectionContainerStyled>\n  );\n};\n\nexport default ExhibitionList;","import dayjs from \"dayjs\";\nimport React from \"react\";\n\nimport { useInstallationsQuery } from \"../../generated/graphql\";\nimport GallerySection from \"../GallerySection\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\nconst Installation: React.FC<{ id: string }> = ({ id }) => {\n  const { data, error, loading } = useInstallationsQuery({\n    variables: {\n      id: id\n    }\n  });\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error || !data || !data.installation) {\n    return null;\n  }\n\n  const { title, materials, location, year, images, photographerCredit } = data.installation;\n\n  return (\n    <GallerySection\n      id={id}\n      title={title || \"\"}\n      images={images}\n      caption={`${title}, ${materials}, ${location}, ${dayjs(year).format('YYYY')}`}\n      credit={photographerCredit}\n    />\n  );\n};\n\nexport default React.memo(Installation);","import React from \"react\";\n\nimport { useInstallationsListQuery } from \"../../generated/graphql\";\nimport { SectionContainer, SectionTitle } from \"../../styles\";\nimport Installation from \"../Installation\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\nconst InstallationsList: React.FC = () => {\n  const { data, error, loading } = useInstallationsListQuery();\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error || !data) {\n    return null;\n  }\n\n  const { installations } = data;\n\n  return (\n    <SectionContainer id=\"installations\">\n      <SectionTitle>INSTALLATIONS</SectionTitle>\n      {installations.map(({ id }) => (\n        <Installation id={id} key={id} />\n      ))}\n    </SectionContainer>\n  );\n};\n\nexport default InstallationsList;","import React from \"react\";\nimport dayjs from \"dayjs\";\n\nimport { useVideosQuery } from \"../../generated/graphql\";\nimport GallerySection from \"../GallerySection\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\nconst Video: React.FC<{ id: string }> = ({ id }) => {\n  const { data, error, loading } = useVideosQuery({\n    variables: {\n      id: id\n    }\n  });\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error || !data || !data.video) {\n    return null;\n  }\n\n  const { title, materials, location, year, url } = data.video;\n\n  return (\n    <GallerySection\n      id={id}\n      title={title || \"\"}\n      videoUrl={url || \"\"}\n      caption={`${title}, ${materials}, ${location}, ${dayjs(year).format('YYYY')}`}\n    />\n  );\n};\n\nexport default React.memo(Video);","import React from \"react\";\n\nimport { useVideoListQuery } from \"../../generated/graphql\";\nimport { SectionContainer } from \"../../styles\"\nimport { SectionTitle } from \"../../styles\";\nimport Video from \"../Video\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\nconst VideoList: React.FC = () => {\n  const { data, error, loading } = useVideoListQuery();\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error || !data) {\n    return null;\n  }\n\n  const { videos } = data;\n\n  return (\n    <SectionContainer id=\"videos\">\n      <SectionTitle>VIDEOS</SectionTitle>\n      {videos.map(({ id }) => (\n        <Video id={id} key={id} />\n      ))}\n    </SectionContainer>\n  );\n};\n\nexport default VideoList;","import styled from \"styled-components\";\nimport { SectionItem } from \"../../styles\";\n\n\nexport const SectionItemStyled = styled(SectionItem)`\n  &:last-of-type {\n    margin-bottom: 800px;\n  }\n\n  @media screen and (max-width: 768px) {\n    &:last-of-type {\n      margin-bottom: 300px;\n    }\n  }\n`;\n\nexport const InfoItem = styled.div`\n  padding: 30px 30px 30px 0;\n\n  > p {\n    text-align: left;\n    margin-top: 0;\n    font-size: 14px;\n    line-height: 16px;\n    color: darkgrey;\n    font-weight: 400;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`;","import React from \"react\";\nimport parse from 'html-react-parser';\n\nimport { useInfoListQuery } from \"../../generated/graphql\";\nimport { GalleryImageContainer, GalleryItem, SectionContainer, SectionItem, SectionItemTitle, SectionTitle } from \"../../styles\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport { InfoItem, SectionItemStyled } from \"./styles\";\n\nconst InfoList: React.FC = () => {\n  const { data, error, loading } = useInfoListQuery();\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error || !data || !data.infos) {\n    return null;\n  }\n\n  const { cv, news, imprint } = data.infos[0];\n\n  return (\n    <SectionContainer id=\"infos\">\n      <SectionTitle>INFO</SectionTitle>\n      <SectionItemStyled id=\"news\">\n        <SectionItemTitle>NEWS</SectionItemTitle>\n        <InfoItem>\n          {parse(news?.html || \"\")}\n        </InfoItem>\n      </SectionItemStyled>\n      <SectionItem id={cv?.id}>\n        <SectionItemTitle>CV</SectionItemTitle>\n        <GalleryItem>\n          <GalleryImageContainer>\n            <img src={cv?.url} alt={cv?.url} />\n          </GalleryImageContainer>\n        </GalleryItem>\n      </SectionItem>\n      <SectionItemStyled id=\"imprint\">\n        <SectionItemTitle>IMPRINT</SectionItemTitle>\n        <InfoItem>\n          {parse(imprint?.html || \"\")}\n        </InfoItem>\n      </SectionItemStyled>\n    </SectionContainer>\n  );\n};\n\nexport default InfoList;","import styled from \"styled-components\";\nimport { ListItemButton } from \"../../styles\";\n\nexport const MobileHeader = styled.div`\n  display: none;\n\n  @media screen and (max-width: 1024px) {\n    position: sticky;\n    top: 0;\n    display: flex;\n    grid-row-start: 1;\n    grid-column-start: 1;\n    grid-column-end: 5;\n    z-index: 1;\n    height: 30px;\n    flex-shrink: 0;\n  }\n`;\n\nconst sharedIconButtonStyles = `\n  background: none;\n  border: none;\n  height: 30px;\n  width: 30px;\n  flex-shrink: 0;\n`;\n\nexport const MobileDrawerOpen = styled.button`\n  @media screen and (max-width: 1024px) {\n    ${sharedIconButtonStyles};\n    margin-left: -30px;\n  }\n\n  @media screen and (max-width: 411px) {\n    margin-left: -26px;\n  }\n`;\n\nexport const MobileDrawerClose = styled.button`\n  display: none;\n\n  @media screen and (max-width: 1024px) {\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0px;\n    z-index: 3;\n    ${sharedIconButtonStyles};\n  }\n`;\n\nexport const StickyContainer = styled.div<{ isExpanded?: boolean }>`\n  position: sticky;\n  top: 0;\n  height: 100vh;\n  opacity: 0.8;\n  margin-left: -30px;\n  margin-right: 0;\n  grid-column-start: 1;\n  grid-column-end: 3;\n  grid-row-start: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  background: white;\n\n  @media screen and (max-width: 1200px) {\n    grid-column-end: 3;\n    margin-right: -30px;\n  }\n\n  @media screen and (max-width: 1024px) {\n    transition: transform 1s ease-out;\n    grid-row-start: 1;\n    z-index: 2;\n    transform: ${({ isExpanded }) => isExpanded ? 'none' : 'translateX(-512px)'};\n    box-shadow: ${({ isExpanded }) => isExpanded ? '0px 5px 16px -4px #B0B0B0' : 'none'};\n    opacity: 1;\n    margin-right: 0;\n  }\n\n  @media screen and (max-width: 411px) {\n    grid-column-end: 4;\n  }\n`;\n\nexport const FixedSidebar = styled.div`\n  position: fixed;\n  top: 30px;\n  left: 30px;\n  height: 100vh;\n\n  @media screen and (max-width: 1300px) {\n    left: 20px;\n  }\n`;\n\nexport const Section = styled.div<{ isExpanded?: boolean }>`\n  height: ${({ isExpanded }) => isExpanded ? 'fit-content' : '25px'};\n  overflow: hidden;\n  text-align: left;\n  align-items: flex-start;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Title = styled.div`\n  color: #563d7c;\n  font-size: 16px;\n  text-decoration: uppercase;\n  line-height: 24px;\n  font-weight: 700;\n  margin-bottom: 15px;\n  white-space: pre;\n`;\n\nexport const Subtitle = styled(ListItemButton)`\n  font-size: 16px;\n  text-transform: capitalize;\n  line-height: 24px;\n  padding-left: 8px;\n  margin-top: 5px;\n`;\n\nexport const ListItem = styled(ListItemButton)`\n  padding-left: 16px;\n`;\n","import React from 'react';\nimport './App.css';\nimport ExhibitionList from './components/ExhibitionList';\nimport InstallationsList from './components/InstallationsList';\nimport VideosList from './components/VideoList';\nimport InfosList from './components/InfoList';\nimport Sidebar from './components/Sidebar';\nimport { MainContainer } from './styles';\n\nfunction App() {\n  return (\n    <MainContainer>\n      <Sidebar />\n      <ExhibitionList />\n      <InstallationsList />\n      <VideosList />\n      <InfosList />\n    </MainContainer>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport './index.css';\nimport App from './App';\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_CMS_ENDPOINT,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}